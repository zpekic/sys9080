   1:				;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:				;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:				;Status bit for read in CHKIO changed to 0x02
   4:				;Status bit for write in OUTC (actually OC3) changed to 0x01
   5:				;Changed UART initialization parameters in INIT
   6:				;Changed ORG statements at end of file to match system with 2K RAM
   7:				;*************************************************************
   8:				; 
   9:				;                 TINY BASIC FOR INTEL 8080
  10:				;                       VERSION 2.0
  11:				;                     BY LI-CHEN WANG
  12:				;                  MODIFIED AND TRANSLATED
  13:				;                    TO INTEL MNEMONICS
  14:				;                     BY ROGER RAUSKOLB
  15:				;                      10 OCTOBER,1976
  16:				;                        @COPYLEFT
  17:				;                   ALL WRONGS RESERVED
  18:				; 
  19:				;*************************************************************
  20:				; 
  21:				; *** ZERO PAGE SUBROUTINES ***
  22:				; 
  23:				; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  24:				; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  25:				; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  26:				; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  27:				; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  28:				; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  29:				; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  30:				; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  31:				; 
  32:				DWA     MACRO WHERE
  33:				        DB   (WHERE SHR 8) + 128
  34:				        DB   WHERE AND 0FFH
  35:				        ENDM
  36:				;
  37:     -	0000          	        ORG  0H
  38:    0+10	0000  310010  	START:  LXI  SP,STACK                   ;*** COLD START ***
  39:   10+7	0003  3EFF    	        MVI  A,0FFH
  40:   17+10	0005  C34606  	        JMP  INIT
  41:				;
  42:   27+18	0008  E3      	        XTHL                            ;*** TSTC OR RST 1 ***
  43:   45+11	0009  EF      	        RST  5                          ;IGNORE BLANKS AND
  44:   56+7	000A  BE      	        CMP  M                          ;TEST CHARACTER
  45:   63+10	000B  C36800  	        JMP  TC1                        ;REST OF THIS IS AT TC1
  46:				;
  47:   73+7	000E  3E0D    	CRLF:   MVI  A,CR                       ;*** CRLF ***
  48:				;
  49:   80+11	0010  F5      	        PUSH PSW                        ;*** OUTC OR RST 2 ***
  50:   91+13	0011  3A0008  	        LDA  OCSW                       ;PRINT CHARACTER ONLY
  51:  104+4	0014  B7      	        ORA  A                          ;IF OCSW SWITCH IS ON
  52:  108+10	0015  C37006  	        JMP  OC2                        ;REST OF THIS IS AT OC2
  53:				;
  54:  118+17	0018  CD7103  	        CALL EXPR2                      ;*** EXPR OR RST 3 ***
  55:  135+11	001B  E5      	        PUSH H                          ;EVALUATE AN EXPRESSION
  56:  146+10	001C  C32D03  	        JMP  EXPR1                      ;REST OF IT AT EXPR1
  57:     -	001F  57      	        DB   'W'
  58:				;
  59:  156+5	0020  7C      	        MOV  A,H                        ;*** COMP OR RST 4 ***
  60:  161+4	0021  BA      	        CMP  D                          ;COMPARE HL WITH DE
  61:  165+5+6	0022  C0      	        RNZ                             ;RETURN CORRECT C AND
  62:  170+5	0023  7D      	        MOV  A,L                        ;Z FLAGS
  63:  175+4	0024  BB      	        CMP  E                          ;BUT OLD A IS LOST
  64:  179+10	0025  C9      	        RET
  65:     -	0026  414E    	        DB   'AN'
  66:				;
  67:  189+7	0028  1A      	SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
  68:  196+7	0029  FE20    	        CPI  20H                        ;IGNORE BLANKS
  69:  203+5+6	002B  C0      	        RNZ                             ;IN TEXT (WHERE DE->)
  70:  208+5	002C  13      	        INX  D                          ;AND RETURN THE FIRST
  71:  213+10	002D  C32800  	        JMP  SS1                        ;NON-BLANK CHAR. IN A
  72:				;
  73:  223+10	0030  F1      	        POP  PSW                        ;*** FINISH/RST 6 ***
  74:  233+17	0031  CDB704  	        CALL FIN                        ;CHECK END OF COMMAND
  75:  250+10	0034  C3CA04  	        JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
  76:     -	0037  47      	        DB   'G'
  77:				;
  78:  260+11	0038  EF      	        RST  5                          ;*** TSTV OR RST 7 ***
  79:  271+7	0039  D640    	        SUI  40H                        ;TEST VARIABLES
  80:  278+5+6	003B  D8      	        RC                              ;C:NOT A VARIABLE
  81:  283+10	003C  C25800  	        JNZ  TV1                        ;NOT "@" ARRAY
  82:  293+5	003F  13      	        INX  D                          ;IT IS THE "@" ARRAY
  83:  298+17	0040  CD1E04  	        CALL PARN                       ;@ SHOULD BE FOLLOWED
  84:  315+10	0043  29      	        DAD  H                          ;BY (EXPR) AS ITS INDEX
  85:  325+10	0044  DA9F00  	        JC   QHOW                       ;IS INDEX TOO BIG?
  86:  335+11	0047  D5      	        PUSH D                          ;WILL IT OVERWRITE
  87:  346+5	0048  EB      	        XCHG                            ;TEXT?
  88:  351+17	0049  CD5D04  	        CALL SIZE                       ;FIND SIZE OF FREE
  89:  368+11	004C  E7      	        RST  4                          ;AND CHECK THAT
  90:  379+10	004D  DAF804  	        JC   ASORRY                     ;IF SO, SAY "SORRY"
  91:  389+10	0050  21000F  	        LXI  H,VARBGN                   ;IF NOT GET ADDRESS
  92:  399+17	0053  CD8004  	        CALL SUBDE                      ;OF @(EXPR) AND PUT IT
  93:  416+10	0056  D1      	        POP  D                          ;IN HL
  94:  426+10	0057  C9      	        RET                             ;C FLAG IS CLEARED
  95:  436+7	0058  FE1B    	TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
  96:  443+4	005A  3F      	        CMC                             ;IF NOT RETURN C FLAG
  97:  447+5+6	005B  D8      	        RC
  98:  452+5	005C  13      	        INX  D                          ;IF A THROUGH Z
  99:  457+10	005D  21000F  	        LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
 100:  467+4	0060  07      	        RLC                             ;THAT VARIABLE
 101:  471+4	0061  85      	        ADD  L                          ;AND RETURN IT IN HL
 102:  475+5	0062  6F      	        MOV  L,A                        ;WITH C FLAG CLEARED
 103:  480+7	0063  3E00    	        MVI  A,0
 104:  487+4	0065  8C      	        ADC  H
 105:  491+5	0066  67      	        MOV  H,A
 106:  496+10	0067  C9      	        RET
 107:				;
 108:				;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
 109:				;       RST  5                          ;THIS IS AT LOC. 8
 110:				;       CMP  M                          ;AND THEN JUMP HERE
 111:  506+5	0068  23      	TC1:    INX  H                          ;COMPARE THE BYTE THAT
 112:  511+10	0069  CA7300  	        JZ   TC2                        ;FOLLOWS THE RST INST.
 113:  521+11	006C  C5      	        PUSH B                          ;WITH THE TEXT (DE->)
 114:  532+7	006D  4E      	        MOV  C,M                        ;IF NOT =, ADD THE 2ND
 115:  539+7	006E  0600    	        MVI  B,0                        ;BYTE THAT FOLLOWS THE
 116:  546+10	0070  09      	        DAD  B                          ;RST TO THE OLD PC
 117:  556+10	0071  C1      	        POP  B                          ;I.E., DO A RELATIVE
 118:  566+5	0072  1B      	        DCX  D                          ;JUMP IF NOT =
 119:  571+5	0073  13      	TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
 120:  576+5	0074  23      	        INX  H                          ;AND CONTINUE
 121:  581+18	0075  E3      	        XTHL
 122:  599+10	0076  C9      	        RET
 123:				;
 124:  609+10	0077  210000  	TSTNUM: LXI  H,0                        ;*** TSTNUM ***
 125:  619+5	007A  44      	        MOV  B,H                        ;TEST IF THE TEXT IS
 126:  624+11	007B  EF      	        RST  5                          ;A NUMBER
 127:  635+7	007C  FE30    	TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
 128:  642+5+6	007E  D8      	        RC                              ;B AND HL
 129:  647+7	007F  FE3A    	        CPI  3AH                        ;IF NUMBERS, CONVERT
 130:  654+5+6	0081  D0      	        RNC                             ;TO BINARY IN HL AND
 131:  659+7	0082  3EF0    	        MVI  A,0F0H                     ;SET B TO # OF DIGITS
 132:  666+4	0084  A4      	        ANA  H                          ;IF H>255, THERE IS NO
 133:  670+10	0085  C29F00  	        JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
 134:  680+5	0088  04      	        INR  B                          ;B COUNTS # OF DIGITS
 135:  685+11	0089  C5      	        PUSH B
 136:  696+5	008A  44      	        MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
 137:  701+5	008B  4D      	        MOV  C,L
 138:  706+10	008C  29      	        DAD  H                          ;WHERE 10* IS DONE BY
 139:  716+10	008D  29      	        DAD  H                          ;SHIFT AND ADD
 140:  726+10	008E  09      	        DAD  B
 141:  736+10	008F  29      	        DAD  H
 142:  746+7	0090  1A      	        LDAX D                          ;AND (DIGIT) IS FROM
 143:  753+5	0091  13      	        INX  D                          ;STRIPPING THE ASCII
 144:  758+7	0092  E60F    	        ANI  0FH                        ;CODE
 145:  765+4	0094  85      	        ADD  L
 146:  769+5	0095  6F      	        MOV  L,A
 147:  774+7	0096  3E00    	        MVI  A,0
 148:  781+4	0098  8C      	        ADC  H
 149:  785+5	0099  67      	        MOV  H,A
 150:  790+10	009A  C1      	        POP  B
 151:  800+7	009B  1A      	        LDAX D                          ;DO THIS DIGIT AFTER
 152:  807+10	009C  F27C00  	        JP   TN1                        ;DIGIT. S SAYS OVERFLOW
 153:  817+11	009F  D5      	QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
 154:  828+10	00A0  11A600  	AHOW:   LXI  D,HOW
 155:  838+10	00A3  C3CE04  	        JMP  ERROR
 156:     -	00A6  484F573F	HOW:    DB   'HOW?'
 157:     -	00AA  0D      	        DB   CR
 158:     -	00AB  4F4B    	OK:     DB   'OK'
 159:     -	00AD  0D      	        DB   CR
 160:     -	00AE  57484154	WHAT:   DB   'WHAT?'
	      3F
 161:     -	00B3  0D      	        DB   CR
 162:     -	00B4  534F5252	SORRY:  DB   'SORRY'
	      59
 163:     -	00B9  0D      	        DB   CR
 164:				;
 165:				;*************************************************************
 166:				;
 167:				; *** MAIN ***
 168:				;
 169:				; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 170:				; AND STORES IT IN THE MEMORY.
 171:				;
 172:				; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 173:				; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 174:				; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 175:				; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 176:				; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 177:				; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 178:				; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 179:				; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 180:				; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 181:				;
 182:				; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 183:				; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 184:				; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 185:				; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 186:				;
 187:				; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 188:				; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 189:				; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 190:				; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 191:				;
 192:				; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 193:				; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 194:				; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 195:				; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 196:				;
 197:				;--- definitions for Intel 8251 UART ------
 198:				;UART_DATA	EQU 2H
 199:				;UART_CTRL	EQU 3H
 200:				;UART_STATUS	EQU 3H
 201:				;UART_TX_EMPTY	EQU 1H
 202:				;UART_RX_FULL	EQU 2H
 203:				;UART_INIT1		EQU 4EH	;1 STOP, NO PARITY, 8 DATA BITS, 16x CLOCK
 204:				;UART_INIT2		EQU 37H	;EH IR RTS ER SBRK RxE DTR TxE (RTS, ERROR RESET, ENABLE RX, DTR, ENABLE TX)
 205:				;--- definitions for Motorola 6850 ACIA ---
 206:     -	0011          	UART_DATA	EQU 11H
 207:     -	0010          	UART_CTRL	EQU 10H
 208:     -	0010          	UART_STATUS	EQU 10H
 209:     -	0002          	UART_TX_EMPTY	EQU 2H
 210:     -	0001          	UART_RX_FULL	EQU 1H
 211:     -	0003          	UART_INIT1		EQU 03H	; reset
 212:     -	0010          	UART_INIT2		EQU 10H	; 8N1, divide clock by 1
 213:				;
 214:  848+10	00BA  310010  	RSTART: LXI  SP,STACK
 215:  858+17	00BD  CD0E00  	ST1:    CALL CRLF                       ;AND JUMP TO HERE
 216:  875+10	00C0  11AB00  	        LXI  D,OK                       ;DE->STRING
 217:  885+4	00C3  97      	        SUB  A                          ;A=0
 218:  889+17	00C4  CD6405  	        CALL PRTSTG                     ;PRINT STRING UNTIL CR
 219:  906+10	00C7  21CE00  	        LXI  H,ST2+1                    ;LITERAL 0
 220:  916+16	00CA  220108  	        SHLD CURRNT                     ;CURRENT->LINE # = 0
 221:  932+10	00CD  210000  	ST2:    LXI  H,0
 222:  942+16	00D0  220908  	        SHLD LOPVAR
 223:  958+16	00D3  220308  	        SHLD STKGOS
 224:  974+7	00D6  3E3E    	ST3:    MVI  A,3EH                      ;PROMPT '>' AND
 225:  981+17	00D8  CDFE04  	        CALL GETLN                      ;READ A LINE
 226:  998+11	00DB  D5      	        PUSH D                          ;DE->END OF LINE
 227: 1009+10	00DC  11370F  	        LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
 228: 1019+17	00DF  CD7700  	        CALL TSTNUM                     ;TEST IF IT IS A NUMBER
 229: 1036+11	00E2  EF      	        RST  5
 230: 1047+5	00E3  7C      	        MOV  A,H                        ;HL=VALUE OF THE # OR
 231: 1052+4	00E4  B5      	        ORA  L                          ;0 IF NO # WAS FOUND
 232: 1056+10	00E5  C1      	        POP  B                          ;BC->END OF LINE
 233: 1066+10	00E6  CA3C07  	        JZ   DIRECT
 234: 1076+5	00E9  1B      	        DCX  D                          ;BACKUP DE AND SAVE
 235: 1081+5	00EA  7C      	        MOV  A,H                        ;VALUE OF LINE # THERE
 236: 1086+7	00EB  12      	        STAX D
 237: 1093+5	00EC  1B      	        DCX  D
 238: 1098+5	00ED  7D      	        MOV  A,L
 239: 1103+7	00EE  12      	        STAX D
 240: 1110+11	00EF  C5      	        PUSH B                          ;BC,DE->BEGIN, END
 241: 1121+11	00F0  D5      	        PUSH D
 242: 1132+5	00F1  79      	        MOV  A,C
 243: 1137+4	00F2  93      	        SUB  E
 244: 1141+11	00F3  F5      	        PUSH PSW                        ;A=# OF BYTES IN LINE
 245: 1152+17	00F4  CD3C05  	        CALL FNDLN                      ;FIND THIS LINE IN SAVE
 246: 1169+11	00F7  D5      	        PUSH D                          ;AREA, DE->SAVE AREA
 247: 1180+10	00F8  C20B01  	        JNZ  ST4                        ;NZ:NOT FOUND, INSERT
 248: 1190+11	00FB  D5      	        PUSH D                          ;Z:FOUND, DELETE IT
 249: 1201+17	00FC  CD5805  	        CALL FNDNXT                     ;FIND NEXT LINE
 250:				                                        ;DE->NEXT LINE
 251: 1218+10	00FF  C1      	        POP  B                          ;BC->LINE TO BE DELETED
 252: 1228+16	0100  2A1508  	        LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
 253: 1244+17	0103  CDE905  	        CALL MVUP                       ;MOVE UP TO DELETE
 254: 1261+5	0106  60      	        MOV  H,B                        ;TXTUNF->UNFILLED AREA
 255: 1266+5	0107  69      	        MOV  L,C
 256: 1271+16	0108  221508  	        SHLD TXTUNF                     ;UPDATE
 257: 1287+10	010B  C1      	ST4:    POP  B                          ;GET READY TO INSERT
 258: 1297+16	010C  2A1508  	        LHLD TXTUNF                     ;BUT FIRST CHECK IF
 259: 1313+10	010F  F1      	        POP  PSW                        ;THE LENGTH OF NEW LINE
 260: 1323+11	0110  E5      	        PUSH H                          ;IS 3 (LINE # AND CR)
 261: 1334+7	0111  FE03    	        CPI  3                          ;THEN DO NOT INSERT
 262: 1341+10	0113  CABA00  	        JZ   RSTART                     ;MUST CLEAR THE STACK
 263: 1351+4	0116  85      	        ADD  L                          ;COMPUTE NEW TXTUNF
 264: 1355+5	0117  6F      	        MOV  L,A
 265: 1360+7	0118  3E00    	        MVI  A,0
 266: 1367+4	011A  8C      	        ADC  H
 267: 1371+5	011B  67      	        MOV  H,A                        ;HL->NEW UNFILLED AREA
 268: 1376+10	011C  11000F  	        LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
 269: 1386+11	011F  E7      	        RST  4                          ;IS ENOUGH SPACE
 270: 1397+10	0120  D2F704  	        JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
 271: 1407+16	0123  221508  	        SHLD TXTUNF                     ;OK, UPDATE TXTUNF
 272: 1423+10	0126  D1      	        POP  D                          ;DE->OLD UNFILLED AREA
 273: 1433+17	0127  CDF205  	        CALL MVDOWN
 274: 1450+10	012A  D1      	        POP  D                          ;DE->BEGIN, HL->END
 275: 1460+10	012B  E1      	        POP  H
 276: 1470+17	012C  CDE905  	        CALL MVUP                       ;MOVE NEW LINE TO SAVE
 277: 1487+10	012F  C3D600  	        JMP  ST3                        ;AREA
 278:				;
 279:				;*************************************************************
 280:				;
 281:				; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 282:				; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 283:				; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 284:				; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 285:				; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 286:				;
 287:				; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
 288:				; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 289:				; GO BACK TO 'RSTART'.
 290:				; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 291:				; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 292:				; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
 293:				; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 294:				;*************************************************************
 295:				;
 296:				; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 297:				;
 298:				; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 299:				;
 300:				; 'STOP(CR)' GOES BACK TO 'RSTART'
 301:				;
 302:				; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 303:				; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 304:				; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 305:				;
 306:				; THERE ARE 3 MORE ENTRIES IN 'RUN':
 307:				; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 308:				; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 309:				; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 310:				;
 311:				; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 312:				; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 313:				;
 314: 1497+17	0132  CDC604  	NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
 315: 1514+10	0135  211708  	        LXI  H,TXTBGN
 316: 1524+16	0138  221508  	        SHLD TXTUNF
 317:				;
 318: 1540+17	013B  CDC604  	STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
 319: 1557+10	013E  C3BA00  	        JMP  RSTART
 320:				;
 321: 1567+17	0141  CDC604  	RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
 322: 1584+10	0144  111708  	        LXI  D,TXTBGN                   ;FIRST SAVED LINE
 323:				;
 324: 1594+10	0147  210000  	RUNNXL: LXI  H,0                        ;*** RUNNXL ***
 325: 1604+17	014A  CD4405  	        CALL FNDLP                      ;FIND WHATEVER LINE #
 326: 1621+10	014D  DABA00  	        JC   RSTART                     ;C:PASSED TXTUNF, QUIT
 327:				;
 328: 1631+5	0150  EB      	RUNTSL: XCHG                            ;*** RUNTSL ***
 329: 1636+16	0151  220108  	        SHLD CURRNT                     ;SET 'CURRENT'->LINE #
 330: 1652+5	0154  EB      	        XCHG
 331: 1657+5	0155  13      	        INX  D                          ;BUMP PASS LINE #
 332: 1662+5	0156  13      	        INX  D
 333:				;
 334: 1667+17	0157  CD8806  	RUNSML: CALL CHKIO                      ;*** RUNSML ***
 335: 1684+10	015A  21C106  	        LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
 336: 1694+10	015D  C33F07  	        JMP  EXEC                       ;AND EXECUTE IT
 337:				;
 338: 1704+11	0160  DF      	GOTO:   RST  3                          ;*** GOTO EXPR ***
 339: 1715+11	0161  D5      	        PUSH D                          ;SAVE FOR ERROR ROUTINE
 340: 1726+17	0162  CDC604  	        CALL ENDCHK                     ;MUST FIND A CR
 341: 1743+17	0165  CD3C05  	        CALL FNDLN                      ;FIND THE TARGET LINE
 342: 1760+10	0168  C2A000  	        JNZ  AHOW                       ;NO SUCH LINE #
 343: 1770+10	016B  F1      	        POP  PSW                        ;CLEAR THE PUSH DE
 344: 1780+10	016C  C35001  	        JMP  RUNTSL                     ;GO DO IT
 345:				;
 346:				;*************************************************************
 347:				;
 348:				; *** LIST *** & PRINT ***
 349:				;
 350:				; LIST HAS TWO FORMS:
 351:				; 'LIST(CR)' LISTS ALL SAVED LINES
 352:				; 'LIST #(CR)' START LIST AT THIS LINE #
 353:				; YOU CAN STOP THE LISTING BY CONTROL C KEY
 354:				;
 355:				; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 356:				; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 357:				; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 358:				;
 359:				; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 360:				; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 361:				; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 362:				; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 363:				; SPECIFIED, 6 POSITIONS WILL BE USED.
 364:				;
 365:				; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 366:				; DOUBLE QUOTES.
 367:				;
 368:				; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
 369:				;
 370:				; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 371:				; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 372:				; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 373:				;
 374: 1790+17	016F  CD7700  	LIST_:  CALL TSTNUM                     ;TEST IF THERE IS A #
 375: 1807+17	0172  CDC604  	        CALL ENDCHK                     ;IF NO # WE GET A 0
 376: 1824+17	0175  CD3C05  	        CALL FNDLN                      ;FIND THIS OR NEXT LINE
 377: 1841+10	0178  DABA00  	LS1:    JC   RSTART                     ;C:PASSED TXTUNF
 378: 1851+17	017B  CDD605  	        CALL PRTLN                      ;PRINT THE LINE
 379: 1868+17	017E  CD8806  	        CALL CHKIO                      ;STOP IF HIT CONTROL-C
 380: 1885+17	0181  CD4405  	        CALL FNDLP                      ;FIND NEXT LINE
 381: 1902+10	0184  C37801  	        JMP  LS1                        ;AND LOOP BACK
 382:				;
 383: 1912+7	0187  0E06    	PRINT:  MVI  C,6                        ;C = # OF SPACES
 384: 1919+11	0189  CF      	        RST  1                          ;IF NULL LIST & ";"
 385:     -	018A  3B      	        DB   3BH
 386:     -	018B  06      	        DB   PR2-$-1
 387: 1930+17	018C  CD0E00  	        CALL CRLF                       ;GIVE CR-LF AND
 388: 1947+10	018F  C35701  	        JMP  RUNSML                     ;CONTINUE SAME LINE
 389: 1957+11	0192  CF      	PR2:    RST  1                          ;IF NULL LIST (CR)
 390:     -	0193  0D      	        DB   CR
 391:     -	0194  06      	        DB   PR0-$-1
 392: 1968+17	0195  CD0E00  	        CALL CRLF                       ;ALSO GIVE CR-LF AND
 393: 1985+10	0198  C34701  	        JMP  RUNNXL                     ;GO TO NEXT LINE
 394: 1995+11	019B  CF      	PR0:    RST  1                          ;ELSE IS IT FORMAT?
 395:     -	019C  23      	        DB   '#'
 396:     -	019D  05      	        DB   PR1-$-1
 397: 2006+11	019E  DF      	        RST  3                          ;YES, EVALUATE EXPR.
 398: 2017+5	019F  4D      	        MOV  C,L                        ;AND SAVE IT IN C
 399: 2022+10	01A0  C3A901  	        JMP  PR3                        ;LOOK FOR MORE TO PRINT
 400: 2032+17	01A3  CD7005  	PR1:    CALL QTSTG                      ;OR IS IT A STRING?
 401: 2049+10	01A6  C3B601  	        JMP  PR8                        ;IF NOT, MUST BE EXPR.
 402: 2059+11	01A9  CF      	PR3:    RST  1                          ;IF ",", GO FIND NEXT
 403:     -	01AA  2C      	        DB   ','
 404:     -	01AB  06      	        DB   PR6-$-1
 405: 2070+17	01AC  CDB704  	        CALL FIN                        ;IN THE LIST.
 406: 2087+10	01AF  C39B01  	        JMP  PR0                        ;LIST CONTINUES
 407: 2097+17	01B2  CD0E00  	PR6:    CALL CRLF                       ;LIST ENDS
 408: 2114+11	01B5  F7      	        RST  6
 409: 2125+11	01B6  DF      	PR8:    RST  3                          ;EVALUATE THE EXPR
 410: 2136+11	01B7  C5      	        PUSH B
 411: 2147+17	01B8  CD9605  	        CALL PRTNUM                     ;PRINT THE VALUE
 412: 2164+10	01BB  C1      	        POP  B
 413: 2174+10	01BC  C3A901  	        JMP  PR3                        ;MORE TO PRINT?
 414:				;
 415:				;*************************************************************
 416:				;
 417:				; *** GOSUB *** & RETURN ***
 418:				;
 419:				; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 420:				; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 421:				; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 422:				; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 423:				; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 424:				; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 425:				; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 426:				; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 427:				; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 428:				;
 429:				; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 430:				; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 431:				; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 432:				; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 433:				;
 434: 2184+17	01BF  CD1D06  	GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
 435: 2201+11	01C2  DF      	        RST  3                          ;PARAMETERS
 436: 2212+11	01C3  D5      	        PUSH D                          ;AND TEXT POINTER
 437: 2223+17	01C4  CD3C05  	        CALL FNDLN                      ;FIND THE TARGET LINE
 438: 2240+10	01C7  C2A000  	        JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
 439: 2250+16	01CA  2A0108  	        LHLD CURRNT                     ;FOUND IT, SAVE OLD
 440: 2266+11	01CD  E5      	        PUSH H                          ;'CURRNT' OLD 'STKGOS'
 441: 2277+16	01CE  2A0308  	        LHLD STKGOS
 442: 2293+11	01D1  E5      	        PUSH H
 443: 2304+10	01D2  210000  	        LXI  H,0                        ;AND LOAD NEW ONES
 444: 2314+16	01D5  220908  	        SHLD LOPVAR
 445: 2330+10	01D8  39      	        DAD  SP
 446: 2340+16	01D9  220308  	        SHLD STKGOS
 447: 2356+10	01DC  C35001  	        JMP  RUNTSL                     ;THEN RUN THAT LINE
 448: 2366+17	01DF  CDC604  	RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
 449: 2383+16	01E2  2A0308  	        LHLD STKGOS                     ;OLD STACK POINTER
 450: 2399+5	01E5  7C      	        MOV  A,H                        ;0 MEANS NOT EXIST
 451: 2404+4	01E6  B5      	        ORA  L
 452: 2408+10	01E7  CACA04  	        JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
 453: 2418+5	01EA  F9      	        SPHL                            ;ELSE, RESTORE IT
 454: 2423+10	01EB  E1      	        POP  H
 455: 2433+16	01EC  220308  	        SHLD STKGOS                     ;AND THE OLD 'STKGOS'
 456: 2449+10	01EF  E1      	        POP  H
 457: 2459+16	01F0  220108  	        SHLD CURRNT                     ;AND THE OLD 'CURRNT'
 458: 2475+10	01F3  D1      	        POP  D                          ;OLD TEXT POINTER
 459: 2485+17	01F4  CD0106  	        CALL POPA                       ;OLD "FOR" PARAMETERS
 460: 2502+11	01F7  F7      	        RST  6                          ;AND WE ARE BACK HOME
 461:				;
 462:				;*************************************************************
 463:				;
 464:				; *** FOR *** & NEXT ***
 465:				;
 466:				; 'FOR' HAS TWO FORMS:
 467:				; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 468:				; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 469:				; EXP3=1.  (I.E., WITH A STEP OF +1.)
 470:				; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 471:				; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 472:				; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 473:				; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 474:				; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 475:				; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 476:				; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 477:				; BEFORE THE NEW ONE OVERWRITES IT.
 478:				; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 479:				; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 480:				; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 481:				; (PURGED FROM THE STACK..)
 482:				;
 483:				; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 484:				; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 485:				; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 486:				; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 487:				; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 488:				; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 489:				; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 490:				; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 491:				; IS PURGED AND EXECUTION CONTINUES.
 492:				;
 493: 2513+17	01F8  CD1D06  	FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
 494: 2530+17	01FB  CDA404  	        CALL SETVAL                     ;SET THE CONTROL VAR.
 495: 2547+5	01FE  2B      	        DCX  H                          ;HL IS ITS ADDRESS
 496: 2552+16	01FF  220908  	        SHLD LOPVAR                     ;SAVE THAT
 497: 2568+10	0202  211707  	        LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
 498: 2578+10	0205  C33F07  	        JMP  EXEC                       ;FOR THE WORD 'TO'
 499: 2588+11	0208  DF      	FR1:    RST  3                          ;EVALUATE THE LIMIT
 500: 2599+16	0209  220D08  	        SHLD LOPLMT                     ;SAVE THAT
 501: 2615+10	020C  211D07  	        LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
 502: 2625+10	020F  C33F07  	        JMP EXEC                        ;FOR THE WORD 'STEP'
 503: 2635+11	0212  DF      	FR2:    RST  3                          ;FOUND IT, GET STEP
 504: 2646+10	0213  C31902  	        JMP  FR4
 505: 2656+10	0216  210100  	FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
 506: 2666+16	0219  220B08  	FR4:    SHLD LOPINC                     ;SAVE THAT TOO
 507: 2682+16	021C  2A0108  	FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
 508: 2698+16	021F  220F08  	        SHLD LOPLN
 509: 2714+5	0222  EB      	        XCHG                            ;AND TEXT POINTER
 510: 2719+16	0223  221108  	        SHLD LOPPT
 511: 2735+10	0226  010A00  	        LXI  B,0AH                      ;DIG INTO STACK TO
 512: 2745+16	0229  2A0908  	        LHLD LOPVAR                     ;FIND 'LOPVAR'
 513: 2761+5	022C  EB      	        XCHG
 514: 2766+5	022D  60      	        MOV  H,B
 515: 2771+5	022E  68      	        MOV  L,B                        ;HL=0 NOW
 516: 2776+10	022F  39      	        DAD  SP                         ;HERE IS THE STACK
 517:     -	0230  3E      	        DB   3EH
 518: 2786+10	0231  09      	FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
 519: 2796+7	0232  7E      	        MOV  A,M                        ;GET THAT OLD 'LOPVAR'
 520: 2803+5	0233  23      	        INX  H
 521: 2808+7	0234  B6      	        ORA  M
 522: 2815+10	0235  CA5202  	        JZ   FR8                        ;0 SAYS NO MORE IN IT
 523: 2825+7	0238  7E      	        MOV  A,M
 524: 2832+5	0239  2B      	        DCX  H
 525: 2837+4	023A  BA      	        CMP  D                          ;SAME AS THIS ONE?
 526: 2841+10	023B  C23102  	        JNZ  FR7
 527: 2851+7	023E  7E      	        MOV  A,M                        ;THE OTHER HALF?
 528: 2858+4	023F  BB      	        CMP  E
 529: 2862+10	0240  C23102  	        JNZ  FR7
 530: 2872+5	0243  EB      	        XCHG                            ;YES, FOUND ONE
 531: 2877+10	0244  210000  	        LXI  H,0H
 532: 2887+10	0247  39      	        DAD  SP                         ;TRY TO MOVE SP
 533: 2897+5	0248  44      	        MOV  B,H
 534: 2902+5	0249  4D      	        MOV  C,L
 535: 2907+10	024A  210A00  	        LXI  H,0AH
 536: 2917+10	024D  19      	        DAD  D
 537: 2927+17	024E  CDF205  	        CALL MVDOWN                     ;AND PURGE 10 WORDS
 538: 2944+5	0251  F9      	        SPHL                            ;IN THE STACK
 539: 2949+16	0252  2A1108  	FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
 540: 2965+5	0255  EB      	        XCHG
 541: 2970+11	0256  F7      	        RST  6                          ;AND CONTINUE
 542:				;
 543: 2981+11	0257  FF      	NEXT:   RST  7                          ;GET ADDRESS OF VAR.
 544: 2992+10	0258  DACA04  	        JC   QWHAT                      ;NO VARIABLE, "WHAT?"
 545: 3002+16	025B  220508  	        SHLD VARNXT                     ;YES, SAVE IT
 546: 3018+11	025E  D5      	NX0:    PUSH D                          ;SAVE TEXT POINTER
 547: 3029+5	025F  EB      	        XCHG
 548: 3034+16	0260  2A0908  	        LHLD LOPVAR                     ;GET VAR. IN 'FOR'
 549: 3050+5	0263  7C      	        MOV  A,H
 550: 3055+4	0264  B5      	        ORA  L                          ;0 SAYS NEVER HAD ONE
 551: 3059+10	0265  CACB04  	        JZ   AWHAT                      ;SO WE ASK: "WHAT?"
 552: 3069+11	0268  E7      	        RST  4                          ;ELSE WE CHECK THEM
 553: 3080+10	0269  CA7602  	        JZ   NX3                        ;OK, THEY AGREE
 554: 3090+10	026C  D1      	        POP  D                          ;NO, LET'S SEE
 555: 3100+17	026D  CD0106  	        CALL POPA                       ;PURGE CURRENT LOOP
 556: 3117+16	0270  2A0508  	        LHLD VARNXT                     ;AND POP ONE LEVEL
 557: 3133+10	0273  C35E02  	        JMP  NX0                        ;GO CHECK AGAIN
 558: 3143+7	0276  5E      	NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
 559: 3150+5	0277  23      	        INX  H
 560: 3155+7	0278  56      	        MOV  D,M                        ;DE=VALUE OF VAR.
 561: 3162+16	0279  2A0B08  	        LHLD LOPINC
 562: 3178+11	027C  E5      	        PUSH H
 563: 3189+5	027D  7C      	        MOV  A,H
 564: 3194+4	027E  AA      	        XRA  D
 565: 3198+5	027F  7A      	        MOV  A,D
 566: 3203+10	0280  19      	        DAD  D                          ;ADD ONE STEP
 567: 3213+10	0281  FA8802  	        JM   NX4
 568: 3223+4	0284  AC      	        XRA  H
 569: 3227+10	0285  FAAA02  	        JM   NX5
 570: 3237+5	0288  EB      	NX4:    XCHG
 571: 3242+16	0289  2A0908  	        LHLD LOPVAR                     ;PUT IT BACK
 572: 3258+7	028C  73      	        MOV  M,E
 573: 3265+5	028D  23      	        INX  H
 574: 3270+7	028E  72      	        MOV  M,D
 575: 3277+16	028F  2A0D08  	        LHLD LOPLMT                     ;HL->LIMIT
 576: 3293+10	0292  F1      	        POP  PSW                        ;OLD HL
 577: 3303+4	0293  B7      	        ORA  A
 578: 3307+10	0294  F29802  	        JP   NX1                        ;STEP > 0
 579: 3317+5	0297  EB      	        XCHG                            ;STEP < 0
 580: 3322+17	0298  CD9C04  	NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
 581: 3339+10	029B  D1      	        POP  D                          ;RESTORE TEXT POINTER
 582: 3349+10	029C  DAAC02  	        JC   NX2                        ;OUTSIDE LIMIT
 583: 3359+16	029F  2A0F08  	        LHLD LOPLN                      ;WITHIN LIMIT, GO
 584: 3375+16	02A2  220108  	        SHLD CURRNT                     ;BACK TO THE SAVED
 585: 3391+16	02A5  2A1108  	        LHLD LOPPT                      ;'CURRNT' AND TEXT
 586: 3407+5	02A8  EB      	        XCHG                            ;POINTER
 587: 3412+11	02A9  F7      	        RST  6
 588: 3423+10	02AA  E1      	NX5:    POP  H
 589: 3433+10	02AB  D1      	        POP  D
 590: 3443+17	02AC  CD0106  	NX2:    CALL POPA                       ;PURGE THIS LOOP
 591: 3460+11	02AF  F7      	        RST  6
 592:				;
 593:				;*************************************************************
 594:				;
 595:				; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 596:				;
 597:				; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 598:				; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 599:				;
 600:				; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 601:				; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 602:				; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 603:				; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 604:				; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 605:				; EXECUTION CONTINUES AT THE NEXT LINE.
 606:				;
 607:				; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 608:				; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 609:				; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 610:				; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 611:				; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 612:				; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 613:				; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 614:				; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 615:				; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 616:				; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 617:				;
 618:				; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 619:				; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 620:				; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 621:				; THIS IS HANDLED IN 'INPERR'.
 622:				;
 623:				; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 624:				; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 625:				; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 626:				; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 627:				; THIS IS DONE BY 'DEFLT'.
 628:				;
 629: 3471+10	02B0  210000  	REM:    LXI  H,0H                       ;*** REM ***
 630:     -	02B3  3E      	        DB   3EH                        ;THIS IS LIKE 'IF 0'
 631:				;
 632: 3481+11	02B4  DF      	IFF:    RST  3                          ;*** IF ***
 633: 3492+5	02B5  7C      	        MOV  A,H                        ;IS THE EXPR.=0?
 634: 3497+4	02B6  B5      	        ORA  L
 635: 3501+10	02B7  C25701  	        JNZ  RUNSML                     ;NO, CONTINUE
 636: 3511+17	02BA  CD5A05  	        CALL FNDSKP                     ;YES, SKIP REST OF LINE
 637: 3528+10	02BD  D25001  	        JNC  RUNTSL                     ;AND RUN THE NEXT LINE
 638: 3538+10	02C0  C3BA00  	        JMP  RSTART                     ;IF NO NEXT, RE-START
 639:				;
 640: 3548+16	02C3  2A0708  	INPERR: LHLD STKINP                     ;*** INPERR ***
 641: 3564+5	02C6  F9      	        SPHL                            ;RESTORE OLD SP
 642: 3569+10	02C7  E1      	        POP  H                          ;AND OLD 'CURRNT'
 643: 3579+16	02C8  220108  	        SHLD CURRNT
 644: 3595+10	02CB  D1      	        POP  D                          ;AND OLD TEXT POINTER
 645: 3605+10	02CC  D1      	        POP  D                          ;REDO INPUT
 646:				;
 647:     -	02CD          	INPUT:                                  ;*** INPUT ***
 648: 3615+11	02CD  D5      	IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
 649: 3626+17	02CE  CD7005  	        CALL QTSTG                      ;IS NEXT ITEM A STRING?
 650: 3643+10	02D1  C3DB02  	        JMP  IP2                        ;NO
 651: 3653+11	02D4  FF      	        RST  7                          ;YES, BUT FOLLOWED BY A
 652: 3664+10	02D5  DA1503  	        JC   IP4                        ;VARIABLE?   NO.
 653: 3674+10	02D8  C3EB02  	        JMP  IP3                        ;YES.  INPUT VARIABLE
 654: 3684+11	02DB  D5      	IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
 655: 3695+11	02DC  FF      	        RST  7                          ;MUST BE VARIABLE NOW
 656: 3706+10	02DD  DACA04  	        JC   QWHAT                      ;"WHAT?" IT IS NOT?
 657: 3716+7	02E0  1A      	        LDAX D                          ;GET READY FOR 'PRTSTR'
 658: 3723+5	02E1  4F      	        MOV  C,A
 659: 3728+4	02E2  97      	        SUB  A
 660: 3732+7	02E3  12      	        STAX D
 661: 3739+10	02E4  D1      	        POP  D
 662: 3749+17	02E5  CD6405  	        CALL PRTSTG                     ;PRINT STRING AS PROMPT
 663: 3766+5	02E8  79      	        MOV  A,C                        ;RESTORE TEXT
 664: 3771+5	02E9  1B      	        DCX  D
 665: 3776+7	02EA  12      	        STAX D
 666: 3783+11	02EB  D5      	IP3:    PUSH D                          ;SAVE TEXT POINTER
 667: 3794+5	02EC  EB      	        XCHG
 668: 3799+16	02ED  2A0108  	        LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
 669: 3815+11	02F0  E5      	        PUSH H
 670: 3826+10	02F1  21CD02  	        LXI  H,IP1                      ;A NEGATIVE NUMBER
 671: 3836+16	02F4  220108  	        SHLD CURRNT                     ;AS A FLAG
 672: 3852+10	02F7  210000  	        LXI  H,0H                       ;SAVE SP TOO
 673: 3862+10	02FA  39      	        DAD  SP
 674: 3872+16	02FB  220708  	        SHLD STKINP
 675: 3888+11	02FE  D5      	        PUSH D                          ;OLD HL
 676: 3899+7	02FF  3E3A    	        MVI  A,3AH                      ;PRINT THIS TOO
 677: 3906+17	0301  CDFE04  	        CALL GETLN                      ;AND GET A LINE
 678: 3923+10	0304  11370F  	        LXI  D,BUFFER                   ;POINTS TO BUFFER
 679: 3933+11	0307  DF      	        RST  3                          ;EVALUATE INPUT
 680: 3944+4	0308  00      	        NOP                             ;CAN BE 'CALL ENDCHK'
 681: 3948+4	0309  00      	        NOP
 682: 3952+4	030A  00      	        NOP
 683: 3956+10	030B  D1      	        POP  D                          ;OK, GET OLD HL
 684: 3966+5	030C  EB      	        XCHG
 685: 3971+7	030D  73      	        MOV  M,E                        ;SAVE VALUE IN VAR.
 686: 3978+5	030E  23      	        INX  H
 687: 3983+7	030F  72      	        MOV  M,D
 688: 3990+10	0310  E1      	        POP  H                          ;GET OLD 'CURRNT'
 689: 4000+16	0311  220108  	        SHLD CURRNT
 690: 4016+10	0314  D1      	        POP  D                          ;AND OLD TEXT POINTER
 691: 4026+10	0315  F1      	IP4:    POP  PSW                        ;PURGE JUNK IN STACK
 692: 4036+11	0316  CF      	        RST  1                          ;IS NEXT CH. ','?
 693:     -	0317  2C      	        DB   ','
 694:     -	0318  03      	        DB   IP5-$-1
 695: 4047+10	0319  C3CD02  	        JMP  IP1                        ;YES, MORE ITEMS.
 696: 4057+11	031C  F7      	IP5:    RST  6
 697:				;
 698: 4068+7	031D  1A      	DEFLT:  LDAX D                          ;***  DEFLT ***
 699: 4075+7	031E  FE0D    	        CPI  CR                         ;EMPTY LINE IS OK
 700: 4082+10	0320  CA2C03  	        JZ   LT1                        ;ELSE IT IS 'LET'
 701:				;
 702: 4092+17	0323  CDA404  	LET:    CALL SETVAL                     ;*** LET ***
 703: 4109+11	0326  CF      	        RST  1                          ;SET VALUE TO VAR.
 704:     -	0327  2C      	        DB   ','
 705:     -	0328  03      	        DB   LT1-$-1
 706: 4120+10	0329  C32303  	        JMP  LET                        ;ITEM BY ITEM
 707: 4130+11	032C  F7      	LT1:    RST  6                          ;UNTIL FINISH
 708:				;
 709:				;*************************************************************
 710:				;
 711:				; *** EXPR ***
 712:				;
 713:				; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 714:				; <EXPR>::<EXPR2>
 715:				;         <EXPR2><REL.OP.><EXPR2>
 716:				; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 717:				; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 718:				; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 719:				; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 720:				; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 721:				; <EXPR4>::=<VARIABLE>
 722:				;           <FUNCTION>
 723:				;           (<EXPR>)
 724:				; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 725:				; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 726:				; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 727:				;
 728:				;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
 729:				;       PUSH H                          ;SAVE <EXPR2> VALUE
 730: 4141+10	032D  212507  	EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
 731: 4151+10	0330  C33F07  	        JMP  EXEC                       ;GO DO IT
 732: 4161+17	0333  CD5C03  	XP11:   CALL XP18                       ;REL.OP.">="
 733: 4178+5+6	0336  D8      	        RC                              ;NO, RETURN HL=0
 734: 4183+5	0337  6F      	        MOV  L,A                        ;YES, RETURN HL=1
 735: 4188+10	0338  C9      	        RET
 736: 4198+17	0339  CD5C03  	XP12:   CALL XP18                       ;REL.OP."#"
 737: 4215+5+6	033C  C8      	        RZ                              ;FALSE, RETURN HL=0
 738: 4220+5	033D  6F      	        MOV  L,A                        ;TRUE, RETURN HL=1
 739: 4225+10	033E  C9      	        RET
 740: 4235+17	033F  CD5C03  	XP13:   CALL XP18                       ;REL.OP.">"
 741: 4252+5+6	0342  C8      	        RZ                              ;FALSE
 742: 4257+5+6	0343  D8      	        RC                              ;ALSO FALSE, HL=0
 743: 4262+5	0344  6F      	        MOV  L,A                        ;TRUE, HL=1
 744: 4267+10	0345  C9      	        RET
 745: 4277+17	0346  CD5C03  	XP14:   CALL XP18                       ;REL.OP."<="
 746: 4294+5	0349  6F      	        MOV  L,A                        ;SET HL=1
 747: 4299+5+6	034A  C8      	        RZ                              ;REL. TRUE, RETURN
 748: 4304+5+6	034B  D8      	        RC
 749: 4309+5	034C  6C      	        MOV  L,H                        ;ELSE SET HL=0
 750: 4314+10	034D  C9      	        RET
 751: 4324+17	034E  CD5C03  	XP15:   CALL XP18                       ;REL.OP."="
 752: 4341+5+6	0351  C0      	        RNZ                             ;FALSE, RETURN HL=0
 753: 4346+5	0352  6F      	        MOV  L,A                        ;ELSE SET HL=1
 754: 4351+10	0353  C9      	        RET
 755: 4361+17	0354  CD5C03  	XP16:   CALL XP18                       ;REL.OP."<"
 756: 4378+5+6	0357  D0      	        RNC                             ;FALSE, RETURN HL=0
 757: 4383+5	0358  6F      	        MOV  L,A                        ;ELSE SET HL=1
 758: 4388+10	0359  C9      	        RET
 759: 4398+10	035A  E1      	XP17:   POP  H                          ;NOT .REL.OP
 760: 4408+10	035B  C9      	        RET                             ;RETURN HL=<EXPR2>
 761: 4418+5	035C  79      	XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
 762: 4423+10	035D  E1      	        POP  H                          ;REL.OP.'S
 763: 4433+10	035E  C1      	        POP  B
 764: 4443+11	035F  E5      	        PUSH H                          ;REVERSE TOP OF STACK
 765: 4454+11	0360  C5      	        PUSH B
 766: 4465+5	0361  4F      	        MOV  C,A
 767: 4470+17	0362  CD7103  	        CALL EXPR2                      ;GET 2ND <EXPR2>
 768: 4487+5	0365  EB      	        XCHG                            ;VALUE IN DE NOW
 769: 4492+18	0366  E3      	        XTHL                            ;1ST <EXPR2> IN HL
 770: 4510+17	0367  CD9C04  	        CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
 771: 4527+10	036A  D1      	        POP  D                          ;RESTORE TEXT POINTER
 772: 4537+10	036B  210000  	        LXI  H,0H                       ;SET HL=0, A=1
 773: 4547+7	036E  3E01    	        MVI  A,1
 774: 4554+10	0370  C9      	        RET
 775:				;
 776: 4564+11	0371  CF      	EXPR2:  RST  1                          ;NEGATIVE SIGN?
 777:     -	0372  2D      	        DB   '-'
 778:     -	0373  08      	        DB   XP21-$-1
 779:				;-----------------------------
 780: 4575+10	0374  D3EF    			OUT 0EFH; TRACE M1
 781:				;-----------------------------		
 782: 4585+10	0376  210000  	        LXI  H,0H                       ;YES, FAKE '0-'
 783: 4595+10	0379  C39F03  	        JMP  XP26                       ;TREAT LIKE SUBTRACT
 784: 4605+11	037C  CF      	XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
 785:     -	037D  2B      	        DB   '+'
 786:     -	037E  00      	        DB   XP22-$-1
 787: 4616+17	037F  CDA903  	XP22:   CALL EXPR3                      ;1ST <EXPR3>
 788: 4633+11	0382  CF      	XP23:   RST  1                          ;ADD?
 789:     -	0383  2B      	        DB   '+'
 790:     -	0384  15      	        DB   XP25-$-1
 791: 4644+11	0385  E5      	        PUSH H                          ;YES, SAVE VALUE
 792: 4655+17	0386  CDA903  	        CALL EXPR3                      ;GET 2ND <EXPR3>
 793: 4672+5	0389  EB      	XP24:   XCHG                            ;2ND IN DE
 794: 4677+18	038A  E3      	        XTHL                            ;1ST IN HL
 795: 4695+5	038B  7C      	        MOV  A,H                        ;COMPARE SIGN
 796: 4700+4	038C  AA      	        XRA  D
 797: 4704+5	038D  7A      	        MOV  A,D
 798: 4709+10	038E  19      	        DAD  D
 799: 4719+10	038F  D1      	        POP  D                          ;RESTORE TEXT POINTER
 800: 4729+10	0390  FA8203  	        JM   XP23                       ;1ST AND 2ND SIGN DIFFER
 801: 4739+4	0393  AC      	        XRA  H                          ;1ST AND 2ND SIGN EQUAL
 802: 4743+10	0394  F28203  	        JP   XP23                       ;SO IS RESULT
 803: 4753+10	0397  C39F00  	        JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
 804: 4763+11	039A  CF      	XP25:   RST  1                          ;SUBTRACT?
 805:     -	039B  2D      	        DB   '-'
 806:     -	039C  88      	        DB   XP42-$-1
 807:				;-----------------------------
 808: 4774+10	039D  D3EF    			OUT 0EFH; TRACE M1
 809:				;-----------------------------		
 810: 4784+11	039F  E5      	XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
 811: 4795+17	03A0  CDA903  	        CALL EXPR3                      ;GET 2ND <EXPR3>
 812: 4812+17	03A3  CD8A04  	        CALL CHGSGN                     ;NEGATE
 813: 4829+10	03A6  C38903  	        JMP  XP24                       ;AND ADD THEM
 814:				;
 815: 4839+17	03A9  CD0904  	EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
 816: 4856+11	03AC  CF      	XP31:   RST  1                          ;MULTIPLY?
 817:     -	03AD  2A      	        DB   '*'
 818:     -	03AE  2D      	        DB   XP34-$-1
 819: 4867+11	03AF  E5      	        PUSH H                          ;YES, SAVE 1ST
 820: 4878+17	03B0  CD0904  	        CALL EXPR4                      ;AND GET 2ND <EXPR4>
 821: 4895+7	03B3  0600    	        MVI  B,0H                       ;CLEAR B FOR SIGN
 822: 4902+17	03B5  CD8704  	        CALL CHKSGN                     ;CHECK SIGN
 823: 4919+18	03B8  E3      	        XTHL                            ;1ST IN HL
 824: 4937+17	03B9  CD8704  	        CALL CHKSGN                     ;CHECK SIGN OF 1ST
 825: 4954+5	03BC  EB      	        XCHG
 826: 4959+18	03BD  E3      	        XTHL
 827: 4977+5	03BE  7C      	        MOV  A,H                        ;IS HL > 255 ?
 828: 4982+4	03BF  B7      	        ORA  A
 829: 4986+10	03C0  CAC903  	        JZ   XP32                       ;NO
 830: 4996+5	03C3  7A      	        MOV  A,D                        ;YES, HOW ABOUT DE
 831: 5001+4	03C4  B2      	        ORA  D
 832: 5005+5	03C5  EB      	        XCHG                            ;PUT SMALLER IN HL
 833: 5010+10	03C6  C2A000  	        JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
 834: 5020+5	03C9  7D      	XP32:   MOV  A,L                        ;THIS IS DUMB
 835: 5025+10	03CA  210000  	        LXI  H,0H                       ;CLEAR RESULT
 836: 5035+4	03CD  B7      	        ORA  A                          ;ADD AND COUNT
 837: 5039+10	03CE  CAFB03  	        JZ   XP35
 838: 5049+10	03D1  19      	XP33:   DAD  D
 839: 5059+10	03D2  DAA000  	        JC   AHOW                       ;OVERFLOW
 840: 5069+5	03D5  3D      	        DCR  A
 841: 5074+10	03D6  C2D103  	        JNZ  XP33
 842: 5084+10	03D9  C3FB03  	        JMP  XP35                       ;FINISHED
 843: 5094+11	03DC  CF      	XP34:   RST  1                          ;DIVIDE?
 844:     -	03DD  2F      	        DB   '/'
 845:     -	03DE  46      	        DB   XP42-$-1
 846: 5105+11	03DF  E5      	        PUSH H                          ;YES, SAVE 1ST <EXPR4>
 847: 5116+17	03E0  CD0904  	        CALL EXPR4                      ;AND GET THE SECOND ONE
 848: 5133+7	03E3  0600    	        MVI  B,0H                       ;CLEAR B FOR SIGN
 849: 5140+17	03E5  CD8704  	        CALL CHKSGN                     ;CHECK SIGN OF 2ND
 850: 5157+18	03E8  E3      	        XTHL                            ;GET 1ST IN HL
 851: 5175+17	03E9  CD8704  	        CALL CHKSGN                     ;CHECK SIGN OF 1ST
 852: 5192+5	03EC  EB      	        XCHG
 853: 5197+18	03ED  E3      	        XTHL
 854: 5215+5	03EE  EB      	        XCHG
 855: 5220+5	03EF  7A      	        MOV  A,D                        ;DIVIDE BY 0?
 856: 5225+4	03F0  B3      	        ORA  E
 857: 5229+10	03F1  CAA000  	        JZ   AHOW                       ;SAY "HOW?"
 858: 5239+11	03F4  C5      	        PUSH B                          ;ELSE SAVE SIGN
 859: 5250+17	03F5  CD6A04  	        CALL DIVIDE                     ;USE SUBROUTINE
 860: 5267+5	03F8  60      	        MOV  H,B                        ;RESULT IN HL NOW
 861: 5272+5	03F9  69      	        MOV  L,C
 862: 5277+10	03FA  C1      	        POP  B                          ;GET SIGN BACK
 863: 5287+10	03FB  D1      	XP35:   POP  D                          ;AND TEXT POINTER
 864: 5297+5	03FC  7C      	        MOV  A,H                        ;HL MUST BE +
 865: 5302+4	03FD  B7      	        ORA  A
 866: 5306+10	03FE  FA9F00  	        JM   QHOW                       ;ELSE IT IS OVERFLOW
 867: 5316+5	0401  78      	        MOV  A,B
 868: 5321+4	0402  B7      	        ORA  A
 869: 5325+11+6	0403  FC8A04  	        CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
 870: 5336+10	0406  C3AC03  	        JMP  XP31                       ;LOOK FOR MORE TERMS
 871:				;
 872: 5346+10	0409  210507  	EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
 873: 5356+10	040C  C33F07  	        JMP  EXEC                       ;AND GO DO IT
 874: 5366+11	040F  FF      	XP40:   RST  7                          ;NO, NOT A FUNCTION
 875: 5377+10	0410  DA1804  	        JC   XP41                       ;NOR A VARIABLE
 876: 5387+7	0413  7E      	        MOV  A,M                        ;VARIABLE
 877: 5394+5	0414  23      	        INX  H
 878: 5399+7	0415  66      	        MOV  H,M                        ;VALUE IN HL
 879: 5406+5	0416  6F      	        MOV  L,A
 880: 5411+10	0417  C9      	        RET
 881: 5421+17	0418  CD7700  	XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
 882: 5438+5	041B  78      	        MOV  A,B                        ;# OF DIGIT
 883: 5443+4	041C  B7      	        ORA  A
 884: 5447+5+6	041D  C0      	        RNZ                             ;OK
 885: 5452+11	041E  CF      	PARN:   RST  1
 886:     -	041F  28      	        DB   '('
 887:     -	0420  05      	        DB   XP43-$-1
 888: 5463+11	0421  DF      	        RST  3                          ;"(EXPR)"
 889: 5474+11	0422  CF      	        RST  1
 890:     -	0423  29      	        DB   ')'
 891:     -	0424  01      	        DB   XP43-$-1
 892: 5485+10	0425  C9      	XP42:   RET
 893: 5495+10	0426  C3CA04  	XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
 894:				;
 895: 5505+17	0429  CD1E04  	RND:    CALL PARN                       ;*** RND(EXPR) ***
 896: 5522+5	042C  7C      	        MOV  A,H                        ;EXPR MUST BE +
 897: 5527+4	042D  B7      	        ORA  A
 898: 5531+10	042E  FA9F00  	        JM   QHOW
 899: 5541+4	0431  B5      	        ORA  L                          ;AND NON-ZERO
 900: 5545+10	0432  CA9F00  	        JZ   QHOW
 901: 5555+11	0435  D5      	        PUSH D                          ;SAVE BOTH
 902: 5566+11	0436  E5      	        PUSH H
 903: 5577+16	0437  2A1308  	        LHLD RANPNT                     ;GET MEMORY AS RANDOM
 904: 5593+10	043A  116D07  	        LXI  D,LSTROM                   ;NUMBER
 905: 5603+11	043D  E7      	        RST  4
 906: 5614+10	043E  DA4404  	        JC   RA1                        ;WRAP AROUND IF LAST
 907: 5624+10	0441  210000  	        LXI  H,START
 908: 5634+7	0444  5E      	RA1:    MOV  E,M
 909: 5641+5	0445  23      	        INX  H
 910: 5646+7	0446  56      	        MOV  D,M
 911: 5653+16	0447  221308  	        SHLD RANPNT
 912: 5669+10	044A  E1      	        POP  H
 913: 5679+5	044B  EB      	        XCHG
 914: 5684+11	044C  C5      	        PUSH B
 915: 5695+17	044D  CD6A04  	        CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
 916: 5712+10	0450  C1      	        POP  B
 917: 5722+10	0451  D1      	        POP  D
 918: 5732+5	0452  23      	        INX  H
 919: 5737+10	0453  C9      	        RET
 920:				;
 921: 5747+17	0454  CD1E04  	ABS:    CALL PARN                       ;*** ABS(EXPR) ***
 922: 5764+5	0457  1B      	        DCX  D
 923: 5769+17	0458  CD8704  	        CALL CHKSGN                     ;CHECK SIGN
 924: 5786+5	045B  13      	        INX  D
 925: 5791+10	045C  C9      	        RET
 926:				;
 927: 5801+16	045D  2A1508  	SIZE:   LHLD TXTUNF                     ;*** SIZE ***
 928: 5817+11	0460  D5      	        PUSH D                          ;GET THE NUMBER OF FREE
 929: 5828+5	0461  EB      	        XCHG                            ;BYTES BETWEEN 'TXTUNF'
 930: 5833+10	0462  21000F  	        LXI  H,VARBGN                   ;AND 'VARBGN'
 931: 5843+17	0465  CD8004  	        CALL SUBDE
 932: 5860+10	0468  D1      	        POP  D
 933: 5870+10	0469  C9      	        RET
 934:				;
 935:				;*************************************************************
 936:				;
 937:				; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
 938:				;
 939:				; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
 940:				;
 941:				; 'SUBDE' SUBSTRACTS DE FROM HL
 942:				;
 943:				; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
 944:				; SIGN AND FLIP SIGN OF B.
 945:				;
 946:				; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
 947:				;
 948:				; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
 949:				; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
 950:				; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
 951:				;
 952: 5880+11	046A  E5      	DIVIDE: PUSH H                          ;*** DIVIDE ***
 953: 5891+5	046B  6C      	        MOV  L,H                        ;DIVIDE H BY DE
 954: 5896+7	046C  2600    	        MVI  H,0
 955: 5903+17	046E  CD7504  	        CALL DV1
 956: 5920+5	0471  41      	        MOV  B,C                        ;SAVE RESULT IN B
 957: 5925+5	0472  7D      	        MOV  A,L                        ;(REMINDER+L)/DE
 958: 5930+10	0473  E1      	        POP  H
 959: 5940+5	0474  67      	        MOV  H,A
 960: 5945+7	0475  0EFF    	DV1:    MVI  C,0FFH                     ;RESULT IN C
 961: 5952+5	0477  0C      	DV2:    INR  C                          ;DUMB ROUTINE
 962: 5957+17	0478  CD8004  	        CALL SUBDE                      ;DIVIDE BY SUBTRACT
 963: 5974+10	047B  D27704  	        JNC  DV2                        ;AND COUNT
 964: 5984+10	047E  19      	        DAD  D
 965: 5994+10	047F  C9      	        RET
 966:				;
 967: 6004+5	0480  7D      	SUBDE:  MOV  A,L                        ;*** SUBDE ***
 968: 6009+4	0481  93      	        SUB  E                          ;SUBSTRACT DE FROM
 969: 6013+5	0482  6F      	        MOV  L,A                        ;HL
 970: 6018+5	0483  7C      	        MOV  A,H
 971: 6023+4	0484  9A      	        SBB  D
 972: 6027+5	0485  67      	        MOV  H,A
 973: 6032+10	0486  C9      	        RET
 974:				;
 975: 6042+5	0487  7C      	CHKSGN: MOV  A,H                        ;*** CHKSGN ***
 976: 6047+4	0488  B7      	        ORA  A                          ;CHECK SIGN OF HL
 977: 6051+5+6	0489  F0      	        RP                              ;IF -, CHANGE SIGN
 978:				;
 979: 6056+5	048A  7C      	CHGSGN: MOV  A,H                        ;*** CHGSGN ***
 980: 6061+11	048B  F5      	        PUSH PSW
 981: 6072+4	048C  2F      	        CMA                             ;CHANGE SIGN OF HL
 982: 6076+5	048D  67      	        MOV  H,A
 983: 6081+5	048E  7D      	        MOV  A,L
 984: 6086+4	048F  2F      	        CMA
 985: 6090+5	0490  6F      	        MOV  L,A
 986: 6095+5	0491  23      	        INX  H
 987: 6100+10	0492  F1      	        POP  PSW
 988: 6110+4	0493  AC      	        XRA  H
 989: 6114+10	0494  F29F00  	        JP   QHOW
 990: 6124+5	0497  78      	        MOV  A,B                        ;AND ALSO FLIP B
 991: 6129+7	0498  EE80    	        XRI  80H
 992: 6136+5	049A  47      	        MOV  B,A
 993: 6141+10	049B  C9      	        RET
 994:				;
 995: 6151+5	049C  7C      	CKHLDE: MOV  A,H
 996: 6156+4	049D  AA      	        XRA  D                          ;SAME SIGN?
 997: 6160+10	049E  F2A204  	        JP   CK1                        ;YES, COMPARE
 998: 6170+5	04A1  EB      	        XCHG                            ;NO, XCH AND COMP
 999: 6175+11	04A2  E7      	CK1:    RST  4
1000: 6186+10	04A3  C9      	        RET
1001:				;
1002:				;*************************************************************
1003:				;
1004:				; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1005:				;
1006:				; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1007:				; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1008:				; TO THAT VALUE.
1009:				;
1010:				; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1011:				; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1012:				; NEXT LINE AND CONTINUE FROM THERE.
1013:				;
1014:				; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1015:				; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1016:				;
1017:				; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1018:				; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1019:				; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1020:				; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1021:				; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1022:				; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1023:				; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1024:				; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1025:				; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1026:				;
1027:				; RELATED TO 'ERROR' ARE THE FOLLOWING:
1028:				; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1029:				; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1030:				; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1031:				; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1032:				;
1033: 6196+11	04A4  FF      	SETVAL: RST  7                          ;*** SETVAL ***
1034: 6207+10	04A5  DACA04  	        JC   QWHAT                      ;"WHAT?" NO VARIABLE
1035: 6217+11	04A8  E5      	        PUSH H                          ;SAVE ADDRESS OF VAR.
1036: 6228+11	04A9  CF      	        RST  1                          ;PASS "=" SIGN
1037:     -	04AA  3D      	        DB   '='
1038:     -	04AB  08      	        DB   SV1-$-1
1039: 6239+11	04AC  DF      	        RST  3                          ;EVALUATE EXPR.
1040: 6250+5	04AD  44      	        MOV  B,H                        ;VALUE IS IN BC NOW
1041: 6255+5	04AE  4D      	        MOV  C,L
1042: 6260+10	04AF  E1      	        POP  H                          ;GET ADDRESS
1043: 6270+7	04B0  71      	        MOV  M,C                        ;SAVE VALUE
1044: 6277+5	04B1  23      	        INX  H
1045: 6282+7	04B2  70      	        MOV  M,B
1046: 6289+10	04B3  C9      	        RET
1047: 6299+10	04B4  C3CA04  	SV1:    JMP  QWHAT                      ;NO "=" SIGN
1048:				;
1049: 6309+11	04B7  CF      	FIN:    RST  1                          ;*** FIN ***
1050:     -	04B8  3B      	        DB   3BH
1051:     -	04B9  04      	        DB   FI1-$-1
1052: 6320+10	04BA  F1      	        POP  PSW                        ;";", PURGE RET. ADDR.
1053: 6330+10	04BB  C35701  	        JMP  RUNSML                     ;CONTINUE SAME LINE
1054: 6340+11	04BE  CF      	FI1:    RST  1                          ;NOT ";", IS IT CR?
1055:     -	04BF  0D      	        DB   CR
1056:     -	04C0  04      	        DB   FI2-$-1
1057: 6351+10	04C1  F1      	        POP  PSW                        ;YES, PURGE RET. ADDR.
1058: 6361+10	04C2  C34701  	        JMP  RUNNXL                     ;RUN NEXT LINE
1059: 6371+10	04C5  C9      	FI2:    RET                             ;ELSE RETURN TO CALLER
1060:				;
1061: 6381+11	04C6  EF      	ENDCHK: RST  5                          ;*** ENDCHK ***
1062: 6392+7	04C7  FE0D    	        CPI  CR                         ;END WITH CR?
1063: 6399+5+6	04C9  C8      	        RZ                              ;OK, ELSE SAY: "WHAT?"
1064:				;
1065: 6404+11	04CA  D5      	QWHAT:  PUSH D                          ;*** QWHAT ***
1066: 6415+10	04CB  11AE00  	AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
1067: 6425+4	04CE  97      	ERROR:  SUB  A                          ;*** ERROR ***
1068: 6429+17	04CF  CD6405  	        CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
1069: 6446+10	04D2  D1      	        POP  D                          ;OR 'SORRY'
1070: 6456+7	04D3  1A      	        LDAX D                          ;SAVE THE CHARACTER
1071: 6463+11	04D4  F5      	        PUSH PSW                        ;AT WHERE OLD DE ->
1072: 6474+4	04D5  97      	        SUB  A                          ;AND PUT A 0 THERE
1073: 6478+7	04D6  12      	        STAX D
1074: 6485+16	04D7  2A0108  	        LHLD CURRNT                     ;GET CURRENT LINE #
1075: 6501+11	04DA  E5      	        PUSH H
1076: 6512+7	04DB  7E      	        MOV  A,M                        ;CHECK THE VALUE
1077: 6519+5	04DC  23      	        INX  H
1078: 6524+7	04DD  B6      	        ORA  M
1079: 6531+10	04DE  D1      	        POP  D
1080: 6541+10	04DF  CABA00  	        JZ   RSTART                     ;IF ZERO, JUST RESTART
1081: 6551+7	04E2  7E      	        MOV  A,M                        ;IF NEGATIVE,
1082: 6558+4	04E3  B7      	        ORA  A
1083: 6562+10	04E4  FAC302  	        JM   INPERR                     ;REDO INPUT
1084: 6572+17	04E7  CDD605  	        CALL PRTLN                      ;ELSE PRINT THE LINE
1085: 6589+5	04EA  1B      	        DCX  D                          ;UPTO WHERE THE 0 IS
1086: 6594+10	04EB  F1      	        POP  PSW                        ;RESTORE THE CHARACTER
1087: 6604+7	04EC  12      	        STAX D
1088: 6611+7	04ED  3E3F    	        MVI  A,3FH                      ;PRINT A "?"
1089: 6618+11	04EF  D7      	        RST  2
1090: 6629+4	04F0  97      	        SUB  A                          ;AND THE REST OF THE
1091: 6633+17	04F1  CD6405  	        CALL PRTSTG                     ;LINE
1092: 6650+10	04F4  C3BA00  	        JMP  RSTART                     ;THEN RESTART
1093:				;
1094: 6660+11	04F7  D5      	QSORRY: PUSH D                          ;*** QSORRY ***
1095: 6671+10	04F8  11B400  	ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
1096: 6681+10	04FB  C3CE04  	        JMP  ERROR
1097:				;
1098:				;*************************************************************
1099:				;
1100:				; *** GETLN *** FNDLN (& FRIENDS) ***
1101:				;
1102:				; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1103:				; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1104:				; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1105:				; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1106:				; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1107:				; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1108:				; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1109:				;
1110:				; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1111:				; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1112:				; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1113:				; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1114:				; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1115:				; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1116:				; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1117:				; LINE, FLAGS ARE C & NZ.
1118:				; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1119:				; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1120:				; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1121:				; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1122:				; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1123:				; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1124:				;
1125: 6691+11	04FE  D7      	GETLN:  RST  2                          ;*** GETLN ***
1126: 6702+10	04FF  11370F  	        LXI  D,BUFFER                   ;PROMPT AND INIT.
1127: 6712+17	0502  CD8806  	GL1:    CALL CHKIO                      ;CHECK KEYBOARD
1128: 6729+10	0505  CA0205  	        JZ   GL1                        ;NO INPUT, WAIT
1129: 6739+7	0508  FE7F    	        CPI  7FH                        ;DELETE LAST CHARACTER?
1130: 6746+10	050A  CA2705  	        JZ   GL3                        ;YES
1131: 6756+11	050D  D7      	        RST  2                          ;INPUT, ECHO BACK
1132: 6767+7	050E  FE0A    	        CPI  0AH                        ;IGNORE LF
1133: 6774+10	0510  CA0205  	        JZ   GL1
1134: 6784+4	0513  B7      	        ORA  A                          ;IGNORE NULL
1135: 6788+10	0514  CA0205  	        JZ   GL1
1136: 6798+7	0517  FE7D    	        CPI  7DH                        ;DELETE THE WHOLE LINE?
1137: 6805+10	0519  CA3405  	        JZ   GL4                        ;YES
1138: 6815+7	051C  12      	        STAX D                          ;ELSE SAVE INPUT
1139: 6822+5	051D  13      	        INX  D                          ;AND BUMP POINTER
1140: 6827+7	051E  FE0D    	        CPI  0DH                        ;WAS IT CR?
1141: 6834+5+6	0520  C8      	        RZ                              ;YES, END OF LINE
1142: 6839+5	0521  7B      	        MOV  A,E                        ;ELSE MORE FREE ROOM?
1143: 6844+7	0522  FE77    	        CPI  BUFEND AND 0FFH
1144: 6851+10	0524  C20205  	        JNZ  GL1                        ;YES, GET NEXT INPUT
1145: 6861+5	0527  7B      	GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
1146: 6866+7	0528  FE37    	        CPI  BUFFER AND 0FFH            ;BUT DO WE HAVE ANY?
1147: 6873+10	052A  CA3405  	        JZ   GL4                        ;NO, REDO WHOLE LINE
1148: 6883+5	052D  1B      	        DCX  D                          ;YES, BACKUP POINTER
1149: 6888+7	052E  3E5C    	        MVI  A,5CH                      ;AND ECHO A BACK-SLASH
1150: 6895+11	0530  D7      	        RST  2
1151: 6906+10	0531  C30205  	        JMP  GL1                        ;GO GET NEXT INPUT
1152: 6916+17	0534  CD0E00  	GL4:    CALL CRLF                       ;REDO ENTIRE LINE
1153: 6933+7	0537  3E5E    	        MVI  A,05EH                     ;CR, LF AND UP-ARROW
1154: 6940+10	0539  C3FE04  	        JMP  GETLN
1155:				;
1156: 6950+5	053C  7C      	FNDLN:  MOV  A,H                        ;*** FNDLN ***
1157: 6955+4	053D  B7      	        ORA  A                          ;CHECK SIGN OF HL
1158: 6959+10	053E  FA9F00  	        JM   QHOW                       ;IT CANNOT BE -
1159: 6969+10	0541  111708  	        LXI  D,TXTBGN                   ;INIT TEXT POINTER
1160:				;
1161:     -	0544          	FNDLP:                                  ;*** FDLNP ***
1162: 6979+11	0544  E5      	FL1:    PUSH H                          ;SAVE LINE #
1163: 6990+16	0545  2A1508  	        LHLD TXTUNF                     ;CHECK IF WE PASSED END
1164: 7006+5	0548  2B      	        DCX  H
1165: 7011+11	0549  E7      	        RST  4
1166: 7022+10	054A  E1      	        POP  H                          ;GET LINE # BACK
1167: 7032+5+6	054B  D8      	        RC                              ;C,NZ PASSED END
1168: 7037+7	054C  1A      	        LDAX D                          ;WE DID NOT, GET BYTE 1
1169: 7044+4	054D  95      	        SUB  L                          ;IS THIS THE LINE?
1170: 7048+5	054E  47      	        MOV  B,A                        ;COMPARE LOW ORDER
1171: 7053+5	054F  13      	        INX  D
1172: 7058+7	0550  1A      	        LDAX D                          ;GET BYTE 2
1173: 7065+4	0551  9C      	        SBB  H                          ;COMPARE HIGH ORDER
1174: 7069+10	0552  DA5905  	        JC   FL2                        ;NO, NOT THERE YET
1175: 7079+5	0555  1B      	        DCX  D                          ;ELSE WE EITHER FOUND
1176: 7084+4	0556  B0      	        ORA  B                          ;IT, OR IT IS NOT THERE
1177: 7088+10	0557  C9      	        RET                             ;NC,Z:FOUND, NC,NZ:NO
1178:				;
1179:     -	0558          	FNDNXT:                                 ;*** FNDNXT ***
1180: 7098+5	0558  13      	        INX  D                          ;FIND NEXT LINE
1181: 7103+5	0559  13      	FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
1182:				;
1183: 7108+7	055A  1A      	FNDSKP: LDAX D                          ;*** FNDSKP ***
1184: 7115+7	055B  FE0D    	        CPI  CR                         ;TRY TO FIND CR
1185: 7122+10	055D  C25905  	        JNZ  FL2                        ;KEEP LOOKING
1186: 7132+5	0560  13      	        INX  D                          ;FOUND CR, SKIP OVER
1187: 7137+10	0561  C34405  	        JMP  FL1                        ;CHECK IF END OF TEXT
1188:				;
1189:				;*************************************************************
1190:				;
1191:				; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1192:				;
1193:				; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1194:				; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1195:				; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1196:				; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1197:				;
1198:				; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1199:				; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1200:				; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1201:				; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1202:				; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1203:				; OVER (USUALLY A JUMP INSTRUCTION.
1204:				;
1205:				; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1206:				; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1207:				; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1208:				; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1209:				; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1210:				;
1211:				; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1212:				;
1213: 7147+5	0564  47      	PRTSTG: MOV  B,A                        ;*** PRTSTG ***
1214: 7152+7	0565  1A      	PS1:    LDAX D                          ;GET A CHARACTER
1215: 7159+5	0566  13      	        INX  D                          ;BUMP POINTER
1216: 7164+4	0567  B8      	        CMP  B                          ;SAME AS OLD A?
1217: 7168+5+6	0568  C8      	        RZ                              ;YES, RETURN
1218: 7173+11	0569  D7      	        RST  2                          ;ELSE PRINT IT
1219: 7184+7	056A  FE0D    	        CPI  CR                         ;WAS IT A CR?
1220: 7191+10	056C  C26505  	        JNZ  PS1                        ;NO, NEXT
1221: 7201+10	056F  C9      	        RET                             ;YES, RETURN
1222:				;
1223: 7211+11	0570  CF      	QTSTG:  RST  1                          ;*** QTSTG ***
1224:     -	0571  22      	        DB   '"'
1225:     -	0572  0F      	        DB   QT3-$-1
1226: 7222+7	0573  3E22    	        MVI  A,22H                      ;IT IS A "
1227: 7229+17	0575  CD6405  	QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
1228: 7246+7	0578  FE0D    	        CPI  CR                         ;WAS LAST ONE A CR?
1229: 7253+10	057A  E1      	        POP  H                          ;RETURN ADDRESS
1230: 7263+10	057B  CA4701  	        JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
1231: 7273+5	057E  23      	QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
1232: 7278+5	057F  23      	        INX  H
1233: 7283+5	0580  23      	        INX  H
1234: 7288+5	0581  E9      	        PCHL                            ;RETURN
1235: 7293+11	0582  CF      	QT3:    RST  1                          ;IS IT A '?
1236:     -	0583  27      	        DB   27H
1237:     -	0584  05      	        DB   QT4-$-1
1238: 7304+7	0585  3E27    	        MVI  A,27H                      ;YES, DO THE SAME
1239: 7311+10	0587  C37505  	        JMP  QT1                        ;AS IN "
1240: 7321+11	058A  CF      	QT4:    RST  1                          ;IS IT BACK-ARROW?
1241:     -	058B  5F      	        DB   5FH
1242:     -	058C  08      	        DB   QT5-$-1
1243: 7332+7	058D  3E8D    	        MVI  A,08DH                     ;YES, CR WITHOUT LF
1244: 7339+11	058F  D7      	        RST  2                          ;DO IT TWICE TO GIVE
1245: 7350+11	0590  D7      	        RST  2                          ;TTY ENOUGH TIME
1246: 7361+10	0591  E1      	        POP  H                          ;RETURN ADDRESS
1247: 7371+10	0592  C37E05  	        JMP  QT2
1248: 7381+10	0595  C9      	QT5:    RET                             ;NONE OF ABOVE
1249:				;
1250: 7391+7	0596  0600    	PRTNUM: MVI  B,0                        ;*** PRTNUM ***
1251: 7398+17	0598  CD8704  	        CALL CHKSGN                     ;CHECK SIGN
1252: 7415+10	059B  F2A105  	        JP   PN1                        ;NO SIGN
1253: 7425+7	059E  062D    	        MVI  B,'-'                      ;B=SIGN
1254: 7432+5	05A0  0D      	        DCR  C                          ;'-' TAKES SPACE
1255: 7437+11	05A1  D5      	PN1:    PUSH D                          ;SAVE
1256: 7448+10	05A2  110A00  	        LXI  D,0AH                      ;DECIMAL
1257: 7458+11	05A5  D5      	        PUSH D                          ;SAVE AS A FLAG
1258: 7469+5	05A6  0D      	        DCR  C                          ;C=SPACES
1259: 7474+11	05A7  C5      	        PUSH B                          ;SAVE SIGN & SPACE
1260: 7485+17	05A8  CD6A04  	PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
1261: 7502+5	05AB  78      	        MOV  A,B                        ;RESULT 0?
1262: 7507+4	05AC  B1      	        ORA  C
1263: 7511+10	05AD  CAB805  	        JZ   PN3                        ;YES, WE GOT ALL
1264: 7521+18	05B0  E3      	        XTHL                            ;NO, SAVE REMAINDER
1265: 7539+5	05B1  2D      	        DCR  L                          ;AND COUNT SPACE
1266: 7544+11	05B2  E5      	        PUSH H                          ;HL IS OLD BC
1267: 7555+5	05B3  60      	        MOV  H,B                        ;MOVE RESULT TO BC
1268: 7560+5	05B4  69      	        MOV  L,C
1269: 7565+10	05B5  C3A805  	        JMP  PN2                        ;AND DIVIDE BY 10
1270: 7575+10	05B8  C1      	PN3:    POP  B                          ;WE GOT ALL DIGITS IN
1271: 7585+5	05B9  0D      	PN4:    DCR  C                          ;THE STACK
1272: 7590+5	05BA  79      	        MOV  A,C                        ;LOOK AT SPACE COUNT
1273: 7595+4	05BB  B7      	        ORA  A
1274: 7599+10	05BC  FAC505  	        JM   PN5                        ;NO LEADING BLANKS
1275: 7609+7	05BF  3E20    	        MVI  A,20H                      ;LEADING BLANKS
1276: 7616+11	05C1  D7      	        RST  2
1277: 7627+10	05C2  C3B905  	        JMP  PN4                        ;MORE?
1278: 7637+5	05C5  78      	PN5:    MOV  A,B                        ;PRINT SIGN
1279: 7642+4	05C6  B7      	        ORA  A
1280: 7646+11+6	05C7  C41000  	        CNZ  10H
1281: 7657+5	05CA  5D      	        MOV  E,L                        ;LAST REMAINDER IN E
1282: 7662+5	05CB  7B      	PN6:    MOV  A,E                        ;CHECK DIGIT IN E
1283: 7667+7	05CC  FE0A    	        CPI  0AH                        ;10 IS FLAG FOR NO MORE
1284: 7674+10	05CE  D1      	        POP  D
1285: 7684+5+6	05CF  C8      	        RZ                              ;IF SO, RETURN
1286: 7689+7	05D0  C630    	        ADI  30H                        ;ELSE CONVERT TO ASCII
1287: 7696+11	05D2  D7      	        RST  2                          ;AND PRINT THE DIGIT
1288: 7707+10	05D3  C3CB05  	        JMP  PN6                        ;GO BACK FOR MORE
1289:				;
1290: 7717+7	05D6  1A      	PRTLN:  LDAX D                          ;*** PRTLN ***
1291: 7724+5	05D7  6F      	        MOV  L,A                        ;LOW ORDER LINE #
1292: 7729+5	05D8  13      	        INX  D
1293: 7734+7	05D9  1A      	        LDAX D                          ;HIGH ORDER
1294: 7741+5	05DA  67      	        MOV  H,A
1295: 7746+5	05DB  13      	        INX  D
1296: 7751+7	05DC  0E04    	        MVI  C,4H                       ;PRINT 4 DIGIT LINE #
1297: 7758+17	05DE  CD9605  	        CALL PRTNUM
1298: 7775+7	05E1  3E20    	        MVI  A,20H                      ;FOLLOWED BY A BLANK
1299: 7782+11	05E3  D7      	        RST  2
1300: 7793+4	05E4  97      	        SUB  A                          ;AND THEN THE NEXT
1301: 7797+17	05E5  CD6405  	        CALL PRTSTG
1302: 7814+10	05E8  C9      	        RET
1303:				;
1304:				;*************************************************************
1305:				;
1306:				; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1307:				;
1308:				; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1309:				; DE = HL
1310:				;
1311:				; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1312:				; UNTIL DE = BC
1313:				;
1314:				; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1315:				; STACK
1316:				;
1317:				; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1318:				; STACK
1319:				;
1320: 7824+11	05E9  E7      	MVUP:   RST  4                          ;*** MVUP ***
1321: 7835+5+6	05EA  C8      	        RZ                              ;DE = HL, RETURN
1322: 7840+7	05EB  1A      	        LDAX D                          ;GET ONE BYTE
1323: 7847+7	05EC  02      	        STAX B                          ;MOVE IT
1324: 7854+5	05ED  13      	        INX  D                          ;INCREASE BOTH POINTERS
1325: 7859+5	05EE  03      	        INX  B
1326: 7864+10	05EF  C3E905  	        JMP  MVUP                       ;UNTIL DONE
1327:				;
1328: 7874+5	05F2  78      	MVDOWN: MOV  A,B                        ;*** MVDOWN ***
1329: 7879+4	05F3  92      	        SUB  D                          ;TEST IF DE = BC
1330: 7883+10	05F4  C2FA05  	        JNZ  MD1                        ;NO, GO MOVE
1331: 7893+5	05F7  79      	        MOV  A,C                        ;MAYBE, OTHER BYTE?
1332: 7898+4	05F8  93      	        SUB  E
1333: 7902+5+6	05F9  C8      	        RZ                              ;YES, RETURN
1334: 7907+5	05FA  1B      	MD1:    DCX  D                          ;ELSE MOVE A BYTE
1335: 7912+5	05FB  2B      	        DCX  H                          ;BUT FIRST DECREASE
1336: 7917+7	05FC  1A      	        LDAX D                          ;BOTH POINTERS AND
1337: 7924+7	05FD  77      	        MOV  M,A                        ;THEN DO IT
1338: 7931+10	05FE  C3F205  	        JMP  MVDOWN                     ;LOOP BACK
1339:				;
1340: 7941+10	0601  C1      	POPA:   POP  B                          ;BC = RETURN ADDR.
1341: 7951+10	0602  E1      	        POP  H                          ;RESTORE LOPVAR, BUT
1342: 7961+16	0603  220908  	        SHLD LOPVAR                     ;=0 MEANS NO MORE
1343: 7977+5	0606  7C      	        MOV  A,H
1344: 7982+4	0607  B5      	        ORA  L
1345: 7986+10	0608  CA1B06  	        JZ   PP1                        ;YEP, GO RETURN
1346: 7996+10	060B  E1      	        POP  H                          ;NOP, RESTORE OTHERS
1347: 8006+16	060C  220B08  	        SHLD LOPINC
1348: 8022+10	060F  E1      	        POP  H
1349: 8032+16	0610  220D08  	        SHLD LOPLMT
1350: 8048+10	0613  E1      	        POP  H
1351: 8058+16	0614  220F08  	        SHLD LOPLN
1352: 8074+10	0617  E1      	        POP  H
1353: 8084+16	0618  221108  	        SHLD LOPPT
1354: 8100+11	061B  C5      	PP1:    PUSH B                          ;BC = RETURN ADDR.
1355: 8111+10	061C  C9      	        RET
1356:				;
1357: 8121+10	061D  21780F  	PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
1358: 8131+17	0620  CD8A04  	        CALL CHGSGN
1359: 8148+10	0623  C1      	        POP  B                          ;BC=RETURN ADDRESS
1360: 8158+10	0624  39      	        DAD  SP                         ;IS STACK NEAR THE TOP?
1361: 8168+10	0625  D2F704  	        JNC  QSORRY                     ;YES, SORRY FOR THAT
1362: 8178+16	0628  2A0908  	        LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
1363: 8194+5	062B  7C      	        MOV  A,H                        ;BUT IF LOPVAR IS 0
1364: 8199+4	062C  B5      	        ORA  L                          ;THAT WILL BE ALL
1365: 8203+10	062D  CA4306  	        JZ   PU1
1366: 8213+16	0630  2A1108  	        LHLD LOPPT                      ;ELSE, MORE TO SAVE
1367: 8229+11	0633  E5      	        PUSH H
1368: 8240+16	0634  2A0F08  	        LHLD LOPLN
1369: 8256+11	0637  E5      	        PUSH H
1370: 8267+16	0638  2A0D08  	        LHLD LOPLMT
1371: 8283+11	063B  E5      	        PUSH H
1372: 8294+16	063C  2A0B08  	        LHLD LOPINC
1373: 8310+11	063F  E5      	        PUSH H
1374: 8321+16	0640  2A0908  	        LHLD LOPVAR
1375: 8337+11	0643  E5      	PU1:    PUSH H
1376: 8348+11	0644  C5      	        PUSH B                          ;BC = RETURN ADDR.
1377: 8359+10	0645  C9      	        RET
1378:				;
1379:				;*************************************************************
1380:				;
1381:				; *** OUTC *** & CHKIO ***
1382:				;
1383:				; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1384:				; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1385:				; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1386:				; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1387:				; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1388:				; ARE RESTORED.
1389:				;
1390:				; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1391:				; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1392:				; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1393:				; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1394:				; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1395:				; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1396:				;
1397:				;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
1398:				;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
1399:				;       ORA  A
1400: 8369+13	0646  320008  	INIT:   STA  OCSW
1401: 8382+7	0649  3E03    	        MVI  A,UART_INIT1           ;Initialize UART
1402: 8389+10	064B  D310    	        OUT  UART_CTRL				;1 stop bit, no parity, 8-bit char, 16x baud
1403: 8399+7	064D  3E10    	        MVI  A,UART_INIT2			;enable receive and transmit
1404: 8406+10	064F  D310    	        OUT  UART_CTRL
1405: 8416+7	0651  1619    	        MVI  D,25					;25 empty lines
1406:     -	0653          	PATLOP:
1407: 8423+17	0653  CD0E00  	        CALL CRLF
1408: 8440+5	0656  15      	        DCR  D
1409: 8445+10	0657  C25306  	        JNZ  PATLOP
1410: 8455+4	065A  97      	        SUB  A
1411: 8459+10	065B  11A706  	        LXI  D,MSG1
1412: 8469+17	065E  CD6405  	        CALL PRTSTG
1413: 8486+10	0661  210000  	        LXI  H,START
1414: 8496+16	0664  221308  	        SHLD RANPNT
1415: 8512+10	0667  211708  	        LXI  H,TXTBGN
1416: 8522+16	066A  221508  	        SHLD TXTUNF
1417: 8538+10	066D  C3BA00  	        JMP  RSTART
1418: 8548+10	0670  C27506  	OC2:    JNZ  OC3                        ;IT IS ON
1419: 8558+10	0673  F1      	        POP  PSW                        ;IT IS OFF
1420: 8568+10	0674  C9      	        RET                             ;RESTORE AF AND RETURN
1421: 8578+10	0675  DB10    	OC3:    IN   UART_STATUS                ;Check status
1422: 8588+7	0677  E602    	        ANI  UART_TX_EMPTY              ;STATUS BIT
1423: 8595+10	0679  CA7506  	        JZ   OC3                        ;NOT READY, WAIT
1424: 8605+10	067C  F1      	        POP  PSW                        ;READY, GET OLD A BACK
1425: 8615+10	067D  D311    	        OUT  UART_DATA                  ;Out to data port
1426: 8625+7	067F  FE0D    	        CPI  CR                         ;WAS IT CR?
1427: 8632+5+6	0681  C0      	        RNZ                             ;NO, FINISHED
1428: 8637+7	0682  3E0A    	        MVI  A,LF                       ;YES, WE SEND LF TOO
1429: 8644+11	0684  D7      	        RST  2                          ;THIS IS RECURSIVE
1430: 8655+7	0685  3E0D    	        MVI  A,CR                       ;GET CR BACK IN A
1431: 8662+10	0687  C9      	        RET
1432:				;
1433: 8672+10	0688  DB10    	CHKIO:  IN   UART_STATUS                ;*** CHKIO ***
1434: 8682+4	068A  00      	        NOP                             ;STATUS BIT FLIPPED?
1435: 8686+7	068B  E601    	        ANI  UART_RX_FULL               ;MASK STATUS BIT
1436: 8693+5+6	068D  C8      	        RZ                              ;NOT READY, RETURN "Z"
1437: 8698+10	068E  DB11    	        IN   UART_DATA                  ;READY, READ DATA
1438: 8708+7	0690  E67F    	        ANI  7FH                        ;MASK BIT 7 OFF
1439: 8715+7	0692  FE0F    	        CPI  0FH                        ;IS IT CONTROL-O?
1440: 8722+10	0694  C2A106  	        JNZ  CI1                        ;NO, MORE CHECKING
1441: 8732+13	0697  3A0008  	        LDA  OCSW                       ;CONTROL-O FLIPS OCSW
1442: 8745+4	069A  2F      	        CMA                             ;ON TO OFF, OFF TO ON
1443: 8749+13	069B  320008  	        STA  OCSW
1444: 8762+10	069E  C38806  	        JMP  CHKIO                      ;GET ANOTHER INPUT
1445: 8772+7	06A1  FE03    	CI1:    CPI  3H                         ;IS IT CONTROL-C?
1446: 8779+5+6	06A3  C0      	        RNZ                             ;NO, RETURN "NZ"
1447: 8784+10	06A4  C3BA00  	        JMP  RSTART                     ;YES, RESTART TBI
1448:				;
1449:     -	06A7  54494E59	MSG1:   DB   'TINY '
	      20
1450:     -	06AC  42415349	        DB   'BASIC'
	      43
1451:     -	06B1  0D      	        DB   CR
1452:				;
1453:				;*************************************************************
1454:				;
1455:				; *** TABLES *** DIRECT *** & EXEC ***
1456:				;
1457:				; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1458:				; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1459:				; OF CODE ACCORDING TO THE TABLE.
1460:				;
1461:				; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1462:				; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1463:				; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1464:				; ALL DIRECT AND STATEMENT COMMANDS.
1465:				;
1466:				; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1467:				; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1468:				; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1469:				;
1470:				; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1471:				; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1472:				; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1473:				; BYTE SET TO 1.
1474:				;
1475:				; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1476:				; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1477:				; MATCH THIS NULL ITEM AS DEFAULT.
1478:				;
1479:     -	06B2          	TAB1:                                   ;DIRECT COMMANDS
1480:     -	06B2  4C495354	        DB   'LIST'
1481:     -	06B6          	        DWA  LIST_
1482:     -	06B8  52554E  	        DB   'RUN'
1483:     -	06BB          	        DWA  RUN
1484:     -	06BD  4E4557  	        DB   'NEW'
1485:     -	06C0          	        DWA  NEW
1486:				;
1487:     -	06C2          	TAB2:                                   ;DIRECT/STATEMENT
1488:     -	06C2  4E455854	        DB   'NEXT'
1489:     -	06C6          	        DWA  NEXT
1490:     -	06C8  4C4554  	        DB   'LET'
1491:     -	06CB          	        DWA  LET
1492:     -	06CD  4946    	        DB   'IF'
1493:     -	06CF          	        DWA  IFF
1494:     -	06D1  474F544F	        DB   'GOTO'
1495:     -	06D5          	        DWA  GOTO
1496:     -	06D7  474F5355	        DB   'GOSUB'
	      42
1497:     -	06DC          	        DWA  GOSUB
1498:     -	06DE  52455455	        DB   'RETURN'
	      524E
1499:     -	06E4          	        DWA  RETURN
1500:     -	06E6  52454D  	        DB   'REM'
1501:     -	06E9          	        DWA  REM
1502:     -	06EB  464F52  	        DB   'FOR'
1503:     -	06EE          	        DWA  FOR
1504:     -	06F0  494E5055	        DB   'INPUT'
	      54
1505:     -	06F5          	        DWA  INPUT
1506:     -	06F7  5052494E	        DB   'PRINT'
	      54
1507:     -	06FC          	        DWA  PRINT
1508:     -	06FE  53544F50	        DB   'STOP'
1509:     -	0702          	        DWA  STOP
1510:     -	0704          	        DWA  DEFLT
1511:				;
1512:     -	0706          	TAB4:                                   ;FUNCTIONS
1513:     -	0706  524E44  	        DB   'RND'
1514:     -	0709          	        DWA  RND
1515:     -	070B  414253  	        DB   'ABS'
1516:     -	070E          	        DWA  ABS
1517:     -	0710  53495A45	        DB   'SIZE'
1518:     -	0714          	        DWA  SIZE
1519:     -	0716          	        DWA  XP40
1520:				;
1521:     -	0718          	TAB5:                                   ;"TO" IN "FOR"
1522:     -	0718  544F    	        DB   'TO'
1523:     -	071A          	        DWA  FR1
1524:     -	071C          	        DWA  QWHAT
1525:				;
1526:     -	071E          	TAB6:                                   ;"STEP" IN "FOR"
1527:     -	071E  53544550	        DB   'STEP'
1528:     -	0722          	        DWA  FR2
1529:     -	0724          	        DWA  FR3
1530:				;
1531:     -	0726          	TAB8:                                   ;RELATION OPERATORS
1532:     -	0726  3E3D    	        DB   '>='
1533:     -	0728          	        DWA  XP11
1534:     -	072A  23      	        DB   '#'
1535:     -	072B          	        DWA  XP12
1536:     -	072D  3E      	        DB   '>'
1537:     -	072E          	        DWA  XP13
1538:     -	0730  3D      	        DB   '='
1539:     -	0731          	        DWA  XP15
1540:     -	0733  3C3D    	        DB   '<='
1541:     -	0735          	        DWA  XP14
1542:     -	0737  3C      	        DB   '<'
1543:     -	0738          	        DWA  XP16
1544:     -	073A          	        DWA  XP17
1545:				;
1546: 8794+10	073C  21B106  	DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
1547:				;
1548:     -	073F          	EXEC:                                   ;*** EXEC ***
1549: 8804+11	073F  EF      	EX0:    RST  5                          ;IGNORE LEADING BLANKS
1550: 8815+11	0740  D5      	        PUSH D                          ;SAVE POINTER
1551: 8826+7	0741  1A      	EX1:    LDAX D                          ;IF FOUND '.' IN STRING
1552: 8833+5	0742  13      	        INX  D                          ;BEFORE ANY MISMATCH
1553: 8838+7	0743  FE2E    	        CPI  2EH                        ;WE DECLARE A MATCH
1554: 8845+10	0745  CA5E07  	        JZ   EX3
1555: 8855+5	0748  23      	        INX  H                          ;HL->TABLE
1556: 8860+7	0749  BE      	        CMP  M                          ;IF MATCH, TEST NEXT
1557: 8867+10	074A  CA4107  	        JZ   EX1
1558: 8877+7	074D  3E7F    	        MVI  A,07FH                     ;ELSE SEE IF BIT 7
1559: 8884+5	074F  1B      	        DCX  D                          ;OF TABLE IS SET, WHICH
1560: 8889+7	0750  BE      	        CMP  M                          ;IS THE JUMP ADDR. (HI)
1561: 8896+10	0751  DA6507  	        JC   EX5                        ;C:YES, MATCHED
1562: 8906+5	0754  23      	EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
1563: 8911+7	0755  BE      	        CMP  M
1564: 8918+10	0756  D25407  	        JNC  EX2
1565: 8928+5	0759  23      	        INX  H                          ;BUMP TO NEXT TAB. ITEM
1566: 8933+10	075A  D1      	        POP  D                          ;RESTORE STRING POINTER
1567: 8943+10	075B  C33F07  	        JMP  EX0                        ;TEST AGAINST NEXT ITEM
1568: 8953+7	075E  3E7F    	EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
1569: 8960+5	0760  23      	EX4:    INX  H                          ;JUMP ADDR., WHICH IS
1570: 8965+7	0761  BE      	        CMP  M                          ;FLAGGED BY BIT 7
1571: 8972+10	0762  D26007  	        JNC  EX4
1572: 8982+7	0765  7E      	EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
1573: 8989+5	0766  23      	        INX  H                          ;ADDRESS FROM THE TABLE
1574: 8994+7	0767  6E      	        MOV  L,M
1575: 9001+7	0768  E67F    	        ANI  7FH                        ;MASK OFF BIT 7
1576: 9008+5	076A  67      	        MOV  H,A
1577: 9013+10	076B  F1      	        POP  PSW                        ;CLEAN UP THE GABAGE
1578: 9023+5	076C  E9      	        PCHL                            ;AND WE GO DO IT
1579:				;
1580:     -	076D          	LSTROM:                                 ;ALL ABOVE CAN BE ROM
1581:				;       ORG  1000H                      ;HERE DOWN MUST BE RAM
1582:     -	0800          	        ORG  0800H
1583:     -	0800          	OCSW:   DS   1                          ;SWITCH FOR OUTPUT
1584:     -	0801          	CURRNT: DS   2                          ;POINTS TO CURRENT LINE
1585:     -	0803          	STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
1586:     -	0805          	VARNXT: DS   2                          ;TEMP STORAGE
1587:     -	0807          	STKINP: DS   2                          ;SAVES SP IN 'INPUT'
1588:     -	0809          	LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
1589:     -	080B          	LOPINC: DS   2                          ;INCREMENT
1590:     -	080D          	LOPLMT: DS   2                          ;LIMIT
1591:     -	080F          	LOPLN:  DS   2                          ;LINE NUMBER
1592:     -	0811          	LOPPT:  DS   2                          ;TEXT POINTER
1593:     -	0813          	RANPNT: DS   2                          ;RANDOM NUMBER POINTER
1594:     -	0815          	TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
1595:     -	0817          	TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
1596:				;       ORG  1366H
1597:				;       ORG  1F00H
1598:     -	0F00          		ORG  0F00H			;for 2K RAM
1599:				TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
1600:     -	0F00          	VARBGN: DS   55                         ;VARIABLE @(0)
1601:     -	0F37          	BUFFER: DS   64                         ;INPUT BUFFER
1602:     -	0F77          	BUFEND: DS   1                          ;BUFFER ENDS
1603:     -	0F78          	STKLMT: DS   1                          ;TOP LIMIT FOR STACK
1604:				;       ORG  1400H
1605:				;       ORG  2000H
1606:     -	1000          		ORG  1000H			;for 4K system -- 2k ROM, 2K RAM
1607:				STACK:  DS   0                          ;STACK STARTS HERE
1608:				;
1609:     -	000D          	CR      EQU  0DH
1610:     -	000A          	LF      EQU  0AH
1611:				
1612:     -	1000          	        END



Statistics:

     4	passes
     0	jr promotions
   198	symbols
  1901	bytes

    30	macro calls
    69	macro bytes
     0	invented symbols



Symbol Table:

abs              454     
ahow              a0     
asorry           4f8     
awhat            4cb     
bufend           f77     
buffer           f37     
chgsgn           48a     
chkio            688     
chksgn           487     
ci1              6a1     
ck1              4a2     
ckhlde           49c     
cr             =   d     
crlf               e     
currnt           801     
deflt            31d     
direct           73c     
divide           46a     
dv1              475     
dv2              477     
endchk           4c6     
error            4ce     
ex0              73f     
ex1              741     
ex2              754     
ex3              75e     
ex4              760     
ex5              765     
exec             73f     
expr1            32d     
expr2            371     
expr3            3a9     
expr4            409     
fi1              4be     
fi2              4c5     
fin              4b7     
fl1              544     
fl2              559     
fndln            53c     
fndlp            544     
fndnxt           558     
fndskp           55a     
for              1f8     
fr1              208     
fr2              212     
fr3              216     
fr4              219     
fr5              21c     
fr7              231     
fr8              252     
getln            4fe     
gl1              502     
gl3              527     
gl4              534     
gosub            1bf     
goto             160     
how               a6     
iff              2b4     
init             646     
inperr           2c3     
input            2cd     
ip1              2cd     
ip2              2db     
ip3              2eb     
ip4              315     
ip5              31c     
let              323     
lf             =   a     
list_            16f     
lopinc           80b     
loplmt           80d     
lopln            80f     
loppt            811     
lopvar           809     
ls1              178     
lstrom           76d     
lt1              32c     
md1              5fa     
msg1             6a7     
mvdown           5f2     
mvup             5e9     
new              132     
next             257     
nx0              25e     
nx1              298     
nx2              2ac     
nx3              276     
nx4              288     
nx5              2aa     
oc2              670     
oc3              675     
ocsw             800     
ok                ab     
parn             41e     
patlop           653     
pn1              5a1     
pn2              5a8     
pn3              5b8     
pn4              5b9     
pn5              5c5     
pn6              5cb     
popa             601     
pp1              61b     
pr0              19b     
pr1              1a3     
pr2              192     
pr3              1a9     
pr6              1b2     
pr8              1b6     
print            187     
prtln            5d6     
prtnum           596     
prtstg           564     
ps1              565     
pu1              643     
pusha            61d     
qhow              9f     
qsorry           4f7     
qt1              575     
qt2              57e     
qt3              582     
qt4              58a     
qt5              595     
qtstg            570     
qwhat            4ca     
ra1              444     
ranpnt           813     
rem              2b0     
return           1df     
rnd              429     
rstart            ba     
run              141     
runnxl           147     
runsml           157     
runtsl           150     
setval           4a4     
size             45d     
sorry             b4     
ss1               28     
st1               bd     
st2               cd     
st3               d6     
st4              10b     
stack           1000     
start              0     
stkgos           803     
stkinp           807     
stklmt           f78     
stop             13b     
subde            480     
sv1              4b4     
tab1             6b2     
tab2             6c2     
tab4             706     
tab5             718     
tab6             71e     
tab8             726     
tc1               68     
tc2               73     
tn1               7c     
tstnum            77     
tv1               58     
txtbgn           817     
txtend           f00     
txtunf           815     
uart_ctrl      =  10     
uart_data      =  11     
uart_init1     =   3     
uart_init2     =  10     
uart_rx_full   =   1     
uart_status    =  10     
uart_tx_empty  =   2     
varbgn           f00     
varnxt           805     
what              ae     
xp11             333     
xp12             339     
xp13             33f     
xp14             346     
xp15             34e     
xp16             354     
xp17             35a     
xp18             35c     
xp21             37c     
xp22             37f     
xp23             382     
xp24             389     
xp25             39a     
xp26             39f     
xp31             3ac     
xp32             3c9     
xp33             3d1     
xp34             3dc     
xp35             3fb     
xp40             40f     
xp41             418     
xp42             425     
xp43             426     
