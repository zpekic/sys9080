   1:				;--------------------------------------------------------------------------
   2:				; Simple test program for Sys9080 project https://github.com/zpekic/sys9080
   3:				; 		(c) zpekic@hotmail.com - 2017, 2018
   4:				;--------------------------------------------------------------------------
   5:				
   6:				include ./sys9080.asm
**** ./sys9080.asm ****
   1:				;--------------------------------------------------------------------------
   2:				; Common definitions for  Sys9080 project https://github.com/zpekic/sys9080
   3:				; 		(c) zpekic@hotmail.com - 2017, 2018
   4:				;--------------------------------------------------------------------------
   5:     -	0010          	ACIA0_STATUS	EQU 0x10; status read-only
   6:     -	0011          	ACIA0_DATA		EQU 0x11; data send/receive
   7:				
   8:     -	0012          	ACIA1_STATUS	EQU 0x12; status read-only
   9:     -	0013          	ACIA1_DATA		EQU 0x13; data send/receive
  10:				
  11:     -	0001          	MASK_VALID	EQU 0x01; fields in UART status register
  12:     -	0002          	MASK_READY	EQU 0x02;
  13:     -	0040          	MASK_ERROR	EQU 0x40;
  14:     -	0080          	MASK_INTREQ	EQU 0x80;
  15:				
  16:     -	0000          	PORT0		EQU 0x00; switches when reading, LEDs when writing
  17:     -	0001          	PORT1		EQU 0x01; buttons (3..0) when reading, LEDs when writing
  18:     -	0002          	PORT2		EQU 0x02; slider switches when reading, LEDs when writing
  19:     -	0003          	PORT_COL	EQU 0x03; hex key colums 3..0 when writing
  20:     -	0003          	PORT_ROW	EQU 0x03; hex key rows 3..0 when reading
  21:     -	00FF          	PORT_VGATRACE	EQU 0xFF; write only port for VGA tracing (only ASCII char!)
  22:				; writing to following ports will set / reset flip flops
  23:     -	0004          	CPUTRACEOFF	EQU 0x04; OUT CPUTRACEOFF to turn off CPU tracing
  24:     -	0005          	CPUTRACEON	EQU 0x05; OUT CPUTRACEON to turn on CPU tracing
  25:     -	0006          	BUSTRACEOFF	EQU 0x06; OUT BUSTRACEOFF to turn off bus tracing
  26:     -	0007          	BUSTRACEON	EQU 0x07; OUT BUSTRACEON to turn on bus tracing
  27:				
  28:     -	0001          	MASK_BUTTON0	EQU 0x01;
  29:     -	0002          	MASK_BUTTON1	EQU 0x02;
  30:     -	0004          	MASK_BUTTON2	EQU 0x04;
  31:     -	0008          	MASK_BUTTON3	EQU 0x08;
  32:     -	0001          	MASK_SW0	EQU 0x01;
  33:     -	0002          	MASK_SW1	EQU 0x02;
  34:     -	0004          	MASK_SW2	EQU 0x04;
  35:     -	0008          	MASK_SW3	EQU 0x08;
  36:     -	0010          	MASK_SW4	EQU 0x10;
  37:     -	0020          	MASK_SW5	EQU 0x20;
  38:     -	0040          	MASK_SW6	EQU 0x40;
  39:     -	0080          	MASK_SW7	EQU 0x80;
  40:				
  41:				;-------------------------------------------------------------
  42:     -	0400          	AltMon		EQU 0x0400; Altmon is org'd to this location
  43:				
  44:				;-------------------------------------------------------------
  45:     -	0C00          	VdpRam		EQU 0x0C00; text video memory, 512b
  46:     -	0DFE          	VdpFgColor	EQU VdpRam + 0x1FE	;write only, RRRGGGBB
  47:     -	0DFF          	VdpBkColor	EQU VdpRam + 0x1FF	;write only, RRRGGGBB
  48:     -	0DFE          	VdpCols		EQU VdpRam + 0x1FE	;read only, should be 30
  49:     -	0DFF          	VdpRows		EQU VdpRam + 0x1FF	;read only, should be 17
  50:     -	FE00          	RamBottom	EQU 0xFE00
  51:     -	FF80          	Heap		EQU RamBottom + 0x0180
  52:     -	FF80          	Temp_PC		EQU Heap; can't use DW because the hex file maps to ROM only
  53:     -	FF82          	CursorCol	EQU Heap + 2
  54:     -	FF83          	CursorRow	EQU Heap + 3
  55:				
  56:				;Some ASCII codes with special handling during PrintCharText
  57:     -	0001          	CS 	EQU 1   ;CS: Clear Screen      
  58:     -	0002          	HM 	EQU 2   ;HM: HoMe cursor       
  59:     -	000D          	NL 	EQU 13  ;NL: New Line
  60:     -	000D          	CR 	EQU 13  ;CR: Carriage return == NL       
  61:     -	000A          	LF 	EQU 10  ;LF: Line Feed       
  62:     -	0003          	ML 	EQU  3  ;ML: Move cursor Left          
  63:     -	0004          	MR 	EQU  4  ;MR: Move cursor Right         
  64:     -	0005          	MU 	EQU  5  ;MU: Move cursor Up          
  65:     -	0006          	MD 	EQU  6  ;MD: Move cursor Down
  66:     -	0009          	TB 	EQU  9  ;TB: TaB        
  67:     -	0008          	BS 	EQU  8  ;BS: BackSpace  
  68:				
  69:				;--------------------------------------
  70:     -	00F0          	fpuBase	EQU 0xF0	; I/O Mapped version
  71:				;fpuBase		EQU 0x0E00	; Mem Mapped version
  72:				;-- write access ----------------------
  73:     -	00F0          	fpuId		EQU fpuBase + 0
  74:     -	00F2          	fpuOperation	EQU fpuBase + 2
  75:     -	00F4          	fpuOperand1Lo	EQU fpuBase + 4
  76:     -	00F6          	fpuOperand1Hi	EQU fpuBase + 6
  77:     -	00F8          	fpuOperand2Lo	EQU fpuBase + 8
  78:     -	00FA          	fpuOperand2Hi	EQU fpuBase + 10
  79:				;-- read access -----------------------
  80:     -	00F0          	fpuDone		EQU fpuBase + 0
  81:     -	00F2          	fpuStatus	EQU fpuBase + 2
  82:     -	00F4          	fpuResultLo	EQU fpuBase + 4
  83:     -	00F6          	fpuResultHi	EQU fpuBase + 6
  84:     -	00F8          	fpuCycles	EQU fpuBase + 8
  85:				
  86:				;---------------------------------------
  87:				; bus tracer "registers"
  88:				;---------------------------------------
  89:     -	03C0          	busTracer	EQU 0x03c0;
  90:     -	03C0          	btMemRead	EQU busTracer + 0
  91:     -	03C4          	btMemWrite	EQU busTracer + 4
  92:     -	03C8          	btIoRead	EQU busTracer + 8
  93:     -	03CC          	btIoWrite	EQU busTracer + 12
  94:     -	03D0          	btFetch		EQU	busTracer + 16
  95:     -	03D4          	btIntAck	EQU busTracer + 20
  96:				
  97:				
**** boot.asm ****
   7:				
   8:     -	0000          			ORG 0x0000	;-----RST0 == RESET
   9:    0+4	0000  F3      			DI
  10:    4+10	0001  C31701  			JMP Boot
  11:				
  12:     -	0008          			ORG 0x0008	;-----RST1 (TRACE)
  13:   14+10	0008  D3FF    			OUT PORT_VGATRACE
  14:   24+10	000A  C9      			RET
  15:				
  16:     -	0010          			ORG 0x0010	;-----RST2 (ACIA1)
  17:   34+4	0010  F3      			DI
  18:   38+10	0011  C3D800  			JMP Acia1ToPort
  19:				
  20:     -	0018          			ORG 0x0018	;-----RST3 (no device, execution trap)
  21:   48+4	0018  F3      			DI
  22:   52+17	0019  CD4600  			CALL DumpState
  23:   69+10	001C  C33C00  			JMP WaitForSS
  24:				
  25:     -	0020          			ORG 0x0020	;-----RST4 (no device, execution trap)
  26:   79+4	0020  F3      			DI
  27:   83+17	0021  CD4600  			CALL DumpState
  28:  100+10	0024  C33C00  			JMP WaitForSS
  29:				
  30:     -	0028          			ORG 0x0028	;-----RST5 (no device, execution trap)
  31:  110+4	0028  F3      			DI
  32:  114+17	0029  CD4600  			CALL DumpState
  33:  131+10	002C  C33C00  			JMP WaitForSS
  34:				
  35:     -	0030          			ORG 0x0030	;-----RST6 (BTN1, execution trap)
  36:  141+4	0030  F3      			DI
  37:  145+10	0031  C34600  			JMP DumpState
  38:  155+10	0034  C33C00  			JMP WaitForSS
  39:				
  40:     -	0038          			ORG 0x0038	;-----RST7 (BTN0, execution trap)
  41:  165+4	0038  F3      			DI
  42:  169+17	0039  CD4600  			CALL DumpState
  43:  186+11	003C  F5      	WaitForSS:	PUSH PSW
  44:  197+10	003D  DB00    	CheckSW7:	IN PORT0
  45:  207+4	003F  17      				RAL		;faster than ANI MASK_SW7
  46:  211+10	0040  D23D00  				JNC CheckSW7
  47:  221+10	0043  F1      				POP PSW
  48:  231+4	0044  FB      				EI
  49:  235+10	0045  C9      				RET
  50:						
  51:  245+18	0046  E3      	DumpState:	XTHL			;PC from stack is now in HL
  52:  263+16	0047  2280FF  				SHLD Temp_PC	;store away (making this code non re-entrant)
  53:  279+18	004A  E3      				XTHL			;restore PC to stack
  54:  297+11	004B  E5      				PUSH H
  55:  308+11	004C  D5      				PUSH D
  56:  319+11	004D  C5      				PUSH B
  57:  330+11	004E  F5      				PUSH PSW
  58:				
  59:  341+11	004F  E5      				PUSH H
  60:  352+11	0050  D5      				PUSH D
  61:  363+11	0051  C5      				PUSH B
  62:  374+11	0052  F5      				PUSH PSW
  63:				
  64:  385+10	0053  21AB02  				LXI H, TextAF
  65:  395+17	0056  CD3C02  				CALL TxStringAtHL
  66:  412+18	0059  E3      				XTHL
  67:  430+17	005A  CD6602  				CALL TxValueOfHL
  68:  447+10	005D  E1      				POP H
  69:							
  70:  457+10	005E  21B202  				LXI H, TextBC
  71:  467+17	0061  CD3C02  				CALL TxStringAtHL
  72:  484+18	0064  E3      				XTHL
  73:  502+17	0065  CD6602  				CALL TxValueOfHL
  74:  519+17	0068  CD5502  				CALL BytesAtHL
  75:  536+10	006B  E1      				POP H
  76:				
  77:  546+10	006C  21B902  				LXI H, TextDE
  78:  556+17	006F  CD3C02  				CALL TxStringAtHL
  79:  573+18	0072  E3      				XTHL
  80:  591+17	0073  CD6602  				CALL TxValueOfHL
  81:  608+17	0076  CD5502  				CALL BytesAtHL
  82:  625+10	0079  E1      				POP H
  83:				
  84:  635+10	007A  21C002  				LXI H, TextHL
  85:  645+17	007D  CD3C02  				CALL TxStringAtHL
  86:  662+18	0080  E3      				XTHL
  87:  680+17	0081  CD6602  				CALL TxValueOfHL
  88:  697+17	0084  CD5502  				CALL BytesAtHL
  89:  714+10	0087  E1      				POP H
  90:				
  91:  724+10	0088  21C702  				LXI H, TextPC
  92:  734+17	008B  CD3C02  				CALL TxStringAtHL
  93:  751+16	008E  2A80FF  				LHLD Temp_PC
  94:  767+17	0091  CD6602  				CALL TxValueOfHL
  95:  784+17	0094  CD5502  				CALL BytesAtHL
  96:				
  97:  801+10	0097  21CE02  				LXI H, TextSP
  98:  811+17	009A  CD3C02  				CALL TxStringAtHL
  99:  828+10	009D  11FFFF  				LXI D, 0xFFFF		;start searching for stack position from top of memory down
 100:  838+16	00A0  2A80FF  				LHLD Temp_PC
 101:  854+5	00A3  EB      				XCHG			;HL = 0xFFFF, DE = PC to search for
 102:  859+5	00A4  7A      	SearchForPC:MOV A, D
 103:  864+7	00A5  BE      				CMP M
 104:  871+10	00A6  C2C200  				JNZ NotFound
 105:  881+5	00A9  2B      				DCX H
 106:  886+5	00AA  7B      				MOV A, E
 107:  891+7	00AB  BE      				CMP M
 108:  898+10	00AC  C2A400  				JNZ SearchForPC
 109:  908+17	00AF  CD6602  				CALL TxValueOfHL
 110:  925+17	00B2  CD5502  				CALL BytesAtHL
 111:  942+7	00B5  3E0D    				MVI A, CR
 112:  949+17	00B7  CD8302  				CALL SendChar
 113:  966+7	00BA  3E0A    				MVI A, LF
 114:  973+17	00BC  CD8302  				CALL SendChar
 115:  990+10	00BF  C3C600  				JMP RestoreRegs
 116: 1000+5	00C2  2B      	NotFound:	DCX H
 117: 1005+10	00C3  C3A400  				JMP SearchForPC
 118:				
 119: 1015+10	00C6  F1      	RestoreRegs:	POP PSW
 120: 1025+10	00C7  C1      			POP B
 121: 1035+10	00C8  D1      			POP D
 122: 1045+10	00C9  E1      			POP H
 123: 1055+4	00CA  FB      			EI
 124: 1059+10	00CB  C9      			RET
 125:				;-------------------------------------------
 126: 1069+11	00CC  F5      	Acia0toPort:	PUSH PSW
 127: 1080+10	00CD  DB10    			IN ACIA0_STATUS
 128: 1090+10	00CF  D300    			OUT PORT0
 129: 1100+10	00D1  DB11    			IN ACIA0_DATA
 130: 1110+10	00D3  D301    			OUT PORT1
 131: 1120+10	00D5  F1      			POP PSW
 132: 1130+4	00D6  FB      			EI
 133: 1134+10	00D7  C9      			RET
 134:				
 135: 1144+11	00D8  F5      	Acia1toPort:	PUSH PSW
 136: 1155+10	00D9  DB12    			IN ACIA1_STATUS
 137: 1165+10	00DB  D300    			OUT PORT0
 138: 1175+10	00DD  DB13    			IN ACIA1_DATA
 139: 1185+10	00DF  D301    			OUT PORT1
 140: 1195+10	00E1  F1      			POP PSW
 141: 1205+4	00E2  FB      			EI
 142: 1209+10	00E3  C9      			RET
 143:				
 144: 1219+11	00E4  F5      	OnByteReceived:	PUSH PSW
 145: 1230+10	00E5  DB01    					IN PORT1		;hooked up to 4 push buttons
 146: 1240+7	00E7  E602    					ANI MASK_BUTTON1
 147: 1247+10	00E9  CA1401  					JZ ProcessByte	
 148: 1257+11	00EC  E5      					PUSH H
 149: 1268+11	00ED  D5      					PUSH D
 150: 1279+11	00EE  C5      					PUSH B
 151:				
 152: 1290+10	00EF  DB12    					IN ACIA1_STATUS		
 153: 1300+5	00F1  67      					MOV H, A
 154: 1305+10	00F2  DB13    					IN ACIA1_DATA
 155: 1315+5	00F4  6F      					MOV L, A
 156: 1320+11	00F5  E5      					PUSH H
 157:				
 158: 1331+10	00F6  DB10    					IN ACIA0_STATUS		
 159: 1341+5	00F8  67      					MOV H, A
 160: 1346+10	00F9  DB11    					IN ACIA0_DATA
 161: 1356+5	00FB  6F      					MOV L, A
 162: 1361+11	00FC  E5      					PUSH H
 163:				
 164: 1372+10	00FD  21D502  					LXI H, TextACIA0
 165: 1382+17	0100  CD3C02  					CALL TxStringAtHL
 166: 1399+10	0103  E1      					POP H
 167: 1409+17	0104  CD6602  					CALL TxValueOfHL
 168:				
 169: 1426+10	0107  21DF02  					LXI H, TextACIA1
 170: 1436+17	010A  CD3C02  					CALL TxStringAtHL
 171: 1453+10	010D  E1      					POP H
 172: 1463+17	010E  CD6602  					CALL TxValueOfHL
 173:				
 174: 1480+10	0111  C1      					POP B
 175: 1490+10	0112  D1      					POP D
 176: 1500+10	0113  E1      					POP H
 177: 1510+10	0114  F1      	ProcessByte:	POP PSW
 178: 1520+4	0115  FB      					EI
 179: 1524+10	0116  C9      					RET
 180:				;-------------------------------------------
 181: 1534+10	0117  210000  	Boot:			LXI H, 0000H
 182:								;DCX H
 183: 1544+5	011A  F9      					SPHL
 184: 1549+17	011B  CDCB01  					CALL InitAcias
 185: 1566+17	011E  CD4602  					CALL TxInlineString
 186:     -	0121  0D0A2A2A	TextGreet1:		DB CR, LF, "*** Sys9080 is ready. RAM @ ", 0x00
	      2A205379
	      73393038
	      30206973
	      20726561
	      64792E20
	      52414D20
	      402000
 187: 1583+10	0140  DB00    					IN PORT0
 188: 1593+7	0142  E640    					ANI 01000000B
 189: 1600+10	0144  CA5701  					JZ TestRam		;if using "fast" clock then check RAM, otherwise skip
 190: 1610+17	0147  CD4602  					CALL TxInlineString
 191:     -	014A  28736B69					DB "(skipped)", 0x00
	      70706564
	      2900
 192: 1627+10	0154  C36301  					JMP TextPort
 193: 1637+17	0157  CD9102  	TestRam:		CALL GetLowestRam
 194: 1654+5	015A  7D      					MOV A, L
 195: 1659+10	015B  D300    					OUT PORT0
 196: 1669+5	015D  7C      					MOV A, H
 197: 1674+10	015E  D301    					OUT PORT1		;display on LEDs
 198: 1684+17	0160  CD6602  					CALL TxValueOfHL	;display on console
 199: 1701+17	0163  CD4602  	TextPort:		CALL TxInlineString
 200:     -	0166  20537769					DB " Switches= ", 0x00
	      74636865
	      733D2000
 201: 1718+10	0172  DB00    					IN PORT0	;big slider switches
 202: 1728+5	0174  6F      					MOV L, A
 203: 1733+10	0175  DB02    					IN PORT2	;dip switches B4...B1 A4..A1
 204: 1743+5	0177  67      					MOV H, A
 205: 1748+17	0178  CD6602  					CALL TxValueOfHL
 206: 1765+17	017B  CD4602  					CALL TxInlineString
 207:     -	017E  20566470	TextVdp:		DB " Vdp rows/cols= ", 0x00	
	      20726F77
	      732F636F
	      6C733D20
	      00
 208: 1782+16	018F  2AFE0D  					LHLD VdpCols
 209: 1798+17	0192  CD6602  					CALL TxValueOfHL
 210: 1815+17	0195  CD4602  					CALL TxInlineString
 211:     -	0198  202A2A2A	TextGreet2:		DB " ***", CR, LF, "  (BTN0/1 to dump CPU/ACIAs state)", CR, LF, 0x00
	      0D0A2020
	      2842544E
	      302F3120
	      746F2064
	      756D7020
	      4350552F
	      41434941
	      73207374
	      61746529
	      0D0A00
 212: 1832+7	01C3  3E01    					MVI A, CS
 213: 1839+10	01C5  D3FF    					OUT PORT_VGATRACE
 214: 1849+4	01C7  FB      					EI 
 215:				;				HLT			;interrupt is needed to go further
 216:				;-------------------------------------------------------------------------
 217: 1853+10	01C8  C30004  					JMP AltMon		;enter monitor program
 218:				;-------------------------------------------------------------------------
 219: 1863+7	01CB  3E03    	InitAcias:		MVI	a,3		;reset 6850 uart
 220: 1870+10	01CD  D310    					OUT	ACIA0_STATUS
 221: 1880+10	01CF  D312    					OUT	ACIA1_STATUS	;2nd 2SIO port as well
 222: 1890+10	01D1  DB02    					IN	PORT2		;slide switches contain ACIA mode
 223: 1900+10	01D3  D302    					OUT PORT2		;reflect on LEDs
 224: 1910+7	01D5  3E10    					MVI	a,10h		;8N2, baudrate clock / 1 (== 38400)
 225:								;NOP
 226:								;NOP
 227: 1917+10	01D7  D310    					OUT	ACIA0_STATUS
 228: 1927+10	01D9  D312    					OUT	ACIA1_STATUS	;2nd 2SIO port as well
 229: 1937+10	01DB  C9      					RET
 230:				
 231:				;PrintAsciiSet: LXI B, 0D20H		;set C to ASCII space
 232:				;SendNextChar: 	MOV A, C
 233:				;		CALL SendChar		;send char
 234:				;		CPI "~"			;end of printable chars reached?
 235:				;		JZ NextLine
 236:				;		INR C
 237:				;		JMP SendNextChar
 238:				;NextLine:	MOV A, B
 239:				;		CALL SendChar		;send char
 240:				;		XRI 00000110B		;cheap trick to convert newline to linefeed 
 241:				;		CALL SendChar		;send char
 242:				;		RET
 243:				
 244: 1947+11	01DC  E5      	DumpTrace:		PUSH H
 245: 1958+11	01DD  D5      					PUSH D
 246: 1969+11	01DE  C5      					PUSH B
 247: 1980+11	01DF  F5      					PUSH PSW
 248:				
 249: 1991+17	01E0  CD4602  					CALL TxInlineString
 250:     -	01E3  41463D00					DB "AF=", 0x00
 251: 2008+18	01E7  E3      					XTHL
 252: 2026+17	01E8  CD6602  					CALL TxValueOfHL
 253: 2043+18	01EB  E3      					XTHL
 254: 2061+5	01EC  33      					INX SP
 255: 2066+5	01ED  33      					INX SP
 256:								
 257: 2071+17	01EE  CD4602  					CALL TxInlineString
 258:     -	01F1  2042433D					DB " BC=", 0x00
	      00
 259: 2088+18	01F6  E3      					XTHL
 260: 2106+17	01F7  CD6602  					CALL TxValueOfHL
 261: 2123+18	01FA  E3      					XTHL
 262: 2141+5	01FB  33      					INX SP
 263: 2146+5	01FC  33      					INX SP
 264:				
 265: 2151+17	01FD  CD4602  					CALL TxInlineString
 266:     -	0200  2044453D					DB " DE=", 0x00
	      00
 267: 2168+18	0205  E3      					XTHL
 268: 2186+17	0206  CD6602  					CALL TxValueOfHL
 269: 2203+18	0209  E3      					XTHL
 270: 2221+5	020A  33      					INX SP
 271: 2226+5	020B  33      					INX SP
 272:				
 273: 2231+17	020C  CD4602  					CALL TxInlineString
 274:     -	020F  20484C3D					DB " HL=", 0x00
	      00
 275: 2248+18	0214  E3      					XTHL
 276: 2266+17	0215  CD6602  					CALL TxValueOfHL
 277: 2283+18	0218  E3      					XTHL
 278: 2301+5	0219  33      					INX SP
 279: 2306+5	021A  33      					INX SP
 280:				
 281: 2311+17	021B  CD4602  					CALL TxInlineString
 282:     -	021E  2050433D					DB " PC=", 0x00
	      00
 283: 2328+18	0223  E3      					XTHL
 284: 2346+17	0224  CD6602  					CALL TxValueOfHL
 285: 2363+18	0227  E3      					XTHL
 286: 2381+17	0228  CD4602  					CALL TxInlineString
 287:     -	022B  0D0A00  					DB CR, LF, 0x00
 288:				
 289: 2398+5	022E  3B      					DCX SP
 290: 2403+5	022F  3B      					DCX SP
 291: 2408+5	0230  3B      					DCX SP
 292: 2413+5	0231  3B      					DCX SP
 293: 2418+5	0232  3B      					DCX SP
 294: 2423+5	0233  3B      					DCX SP
 295: 2428+5	0234  3B      					DCX SP
 296: 2433+5	0235  3B      					DCX SP
 297:				
 298: 2438+10	0236  F1      					POP PSW
 299: 2448+10	0237  C1      					POP B
 300: 2458+10	0238  D1      					POP D
 301: 2468+10	0239  E1      					POP H
 302:								
 303:								;OUT CPUTRACEON
 304: 2478+4	023A  FB      					EI
 305: 2482+10	023B  C9      					RET
 306:							
 307: 2492+7	023C  7E      	TxStringAtHL:	MOV A, M
 308: 2499+4	023D  A7      					ANA A
 309: 2503+5+6	023E  C8      					RZ
 310: 2508+17	023F  CD8302  					CALL SendChar
 311: 2525+5	0242  23      					INX H
 312: 2530+10	0243  C33C02  					JMP TxStringAtHL
 313:				
 314: 2540+10	0246  E1      	TxInlineString:	POP H			;Return address was pointing at string start
 315: 2550+7	0247  7E      	TxInlineChar:	MOV A, M
 316: 2557+4	0248  A7      					ANA A
 317: 2561+10	0249  CA5302  					JZ Return
 318: 2571+17	024C  CD8302  					CALL SendChar
 319: 2588+5	024F  23      					INX H
 320: 2593+10	0250  C34702  					JMP TxInlineChar
 321: 2603+5	0253  23      	Return:			INX H			;go beyond terminating null byte
 322: 2608+5	0254  E9      					PCHL
 323:				
 324: 2613+7	0255  0E10    	BytesAtHL:		MVI C, 0x10		;dump 16 bytes at (HL)
 325: 2620+7	0257  3E20    	NextByteAtHL:	MVI A, " "
 326: 2627+17	0259  CD8302  					CALL SendChar
 327: 2644+7	025C  7E      					MOV A, M
 328: 2651+17	025D  CD6B02  					CALL TxValueOfA
 329: 2668+5	0260  0D      					DCR C
 330: 2673+5+6	0261  C8      					RZ			;return if reached 0
 331: 2678+5	0262  23      					INX H
 332: 2683+10	0263  C35702  					JMP NextByteAtHL
 333:				
 334: 2693+5	0266  7C      	TxValueOfHL:	MOV A, H
 335: 2698+17	0267  CD6B02  					CALL TxValueOfA
 336: 2715+5	026A  7D      					MOV A, L
 337: 2720+11	026B  F5      	TxValueOfA:		PUSH PSW
 338: 2731+4	026C  0F      					RRC
 339: 2735+4	026D  0F      					RRC
 340: 2739+4	026E  0F      					RRC
 341: 2743+4	026F  0F      					RRC
 342: 2747+17	0270  CD7402  					CALL TxHexDig
 343: 2764+10	0273  F1      					POP PSW
 344: 2774+7	0274  E60F    	TxHexDig:		ANI 0x0F
 345: 2781+7	0276  C630    					ADI '0'
 346: 2788+7	0278  FE3A    					CPI '9' + 1
 347: 2795+10	027A  FA7F02  					JM TxHexDigOut
 348: 2805+7	027D  C607    					ADI 0x07
 349: 2812+17	027F  CD8302  	TxHexDigOut:	CALL SendChar
 350: 2829+10	0282  C9      					RET
 351:					
 352: 2839+11	0283  F5      	SendChar:		PUSH PSW
 353: 2850+10	0284  D3FF    					OUT PORT_VGATRACE
 354: 2860+10	0286  DB10    	CheckIfReady:	IN ACIA0_STATUS
 355: 2870+7	0288  E602    					ANI MASK_READY
 356: 2877+10	028A  CA8602  					JZ CheckIfReady
 357: 2887+10	028D  F1      					POP PSW
 358: 2897+10	028E  D311    					OUT ACIA0_DATA
 359: 2907+10	0290  C9      					RET
 360:				
 361: 2917+10	0291  21FFFF  	GetLowestRam:	LXI H, 0xFFFF	;assume RAM is located near top of address space
 362: 2927+7	0294  7E      	NextAddress:	MOV A, M
 363: 2934+4	0295  2F      					CMA		;flip all bits
 364: 2938+7	0296  77      					MOV M, A
 365: 2945+7	0297  BE      					CMP M
 366: 2952+10	0298  C2A902  					JNZ LowestFound
 367: 2962+4	029B  2F      					CMA
 368: 2966+7	029C  77      					MOV M, A
 369: 2973+5	029D  7D      					MOV A, L
 370: 2978+10	029E  D300    					OUT PORT0	;display address being examined
 371: 2988+5	02A0  7C      					MOV A, H
 372: 2993+10	02A1  D301    					OUT PORT1
 373: 3003+4	02A3  B5      					ORA L
 374: 3007+5+6	02A4  C8      					RZ		;Bail if HL = 0
 375: 3012+5	02A5  2B      					DCX H
 376: 3017+10	02A6  C39402  					JMP NextAddress
 377: 3027+5	02A9  23      	LowestFound:	INX H
 378: 3032+10	02AA  C9      					RET
 379:						
 380:     -	02AB  0D0A2041	TextAF:		DB CR, LF, " AF=", 0x00
	      463D00
 381:     -	02B2  0D0A2042	TextBC:		DB CR, LF, " BC=", 0x00
	      433D00
 382:     -	02B9  0D0A2044	TextDE:		DB CR, LF, " DE=", 0x00
	      453D00
 383:     -	02C0  0D0A2048	TextHL:		DB CR, LF, " HL=", 0x00
	      4C3D00
 384:     -	02C7  0D0A2050	TextPC:		DB CR, LF, " PC=", 0x00
	      433D00
 385:     -	02CE  0D0A2053	TextSP:		DB CR, LF, " SP=", 0x00
	      503D00
 386:     -	02D5  0D0A2041	TextACIA0:	DB CR, LF, " ACIA0=", 0x00
	      43494130
	      3D00
 387:     -	02DF  0D0A2041	TextACIA1:	DB CR, LF, " ACIA1=", 0x00
	      43494131
	      3D00
 388:     -	02E9  00      	End:		DB 0x00		;Cheap trick to see last used address



Statistics:

     4	passes
     0	jr promotions
   113	symbols
   729	bytes



Symbol Table:

acia0_data     =  11     
acia0_status   =  10     
acia0toport       cc     
acia1_data     =  13     
acia1_status   =  12     
acia1toport       d8     
altmon         = 400     
boot             117     
bs             =   8     
btfetch        = 3d0     
btintack       = 3d4     
btioread       = 3c8     
btiowrite      = 3cc     
btmemread      = 3c0     
btmemwrite     = 3c4     
bustraceoff    =   6     
bustraceon     =   7     
bustracer      = 3c0     
bytesathl        255     
checkifready     286     
checksw7          3d     
cputraceoff    =   4     
cputraceon     =   5     
cr             =   d     
cs             =   1     
cursorcol      =ff82     
cursorrow      =ff83     
dumpstate         46     
dumptrace        1dc     
end              2e9     
fpubase        =  f0     
fpucycles      =  f8     
fpudone        =  f0     
fpuid          =  f0     
fpuoperand1hi  =  f6     
fpuoperand1lo  =  f4     
fpuoperand2hi  =  fa     
fpuoperand2lo  =  f8     
fpuoperation   =  f2     
fpuresulthi    =  f6     
fpuresultlo    =  f4     
fpustatus      =  f2     
getlowestram     291     
heap           =ff80     
hm             =   2     
initacias        1cb     
lf             =   a     
lowestfound      2a9     
mask_button0   =   1     
mask_button1   =   2     
mask_button2   =   4     
mask_button3   =   8     
mask_error     =  40     
mask_intreq    =  80     
mask_ready     =   2     
mask_sw0       =   1     
mask_sw1       =   2     
mask_sw2       =   4     
mask_sw3       =   8     
mask_sw4       =  10     
mask_sw5       =  20     
mask_sw6       =  40     
mask_sw7       =  80     
mask_valid     =   1     
md             =   6     
ml             =   3     
mr             =   4     
mu             =   5     
nextaddress      294     
nextbyteathl     257     
nl             =   d     
notfound          c2     
onbytereceived    e4     
port0          =   0     
port1          =   1     
port2          =   2     
port_col       =   3     
port_row       =   3     
port_vgatrace  =  ff     
processbyte      114     
rambottom      =fe00     
restoreregs       c6     
return           253     
searchforpc       a4     
sendchar         283     
tb             =   9     
temp_pc        =ff80     
testram          157     
textacia0        2d5     
textacia1        2df     
textaf           2ab     
textbc           2b2     
textde           2b9     
textgreet1       121     
textgreet2       198     
texthl           2c0     
textpc           2c7     
textport         163     
textsp           2ce     
textvdp          17e     
txhexdig         274     
txhexdigout      27f     
txinlinechar     247     
txinlinestring   246     
txstringathl     23c     
txvalueofa       26b     
txvalueofhl      266     
vdpbkcolor     = dff     
vdpcols        = dfe     
vdpfgcolor     = dfe     
vdpram         = c00     
vdprows        = dff     
waitforss         3c     
