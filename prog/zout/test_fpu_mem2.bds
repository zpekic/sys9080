binary-debuggable-source
0000 0000 f test_fpu_mem2.asm
0000 0000 s ;--------------------------------------------------------------------------
0000 0000 s ; Simple test program for Sys9080 project https://github.com/zpekic/sys9080
0000 0000 s ; 		(c) zpekic@hotmail.com - 2017, 2018
0000 0000 s ;--------------------------------------------------------------------------
0000 0000 s 
0000 0000 s include ./sys9080.asm
0000 0000 f ./sys9080.asm
0000 0000 s ;--------------------------------------------------------------------------
0000 0000 s ; Common definitions for  Sys9080 project https://github.com/zpekic/sys9080
0000 0000 s ; 		(c) zpekic@hotmail.com - 2017, 2018
0000 0000 s ;--------------------------------------------------------------------------
0000 0000 s ACIA0_STATUS	EQU 0x10; status read-only
0000 0000 s ACIA0_DATA	EQU 0x11; data send/receive
0000 0000 s ACIA1_STATUS	EQU 0x12; status read-only
0000 0000 s ACIA1_DATA	EQU 0x13; data send/receive
0000 0000 s PORT0		EQU 0x00; switches when reading, LEDs when writing
0000 0000 s PORT1		EQU 0x01; buttons (3..0) when reading, LEDs when writing
0000 0000 s PORT2		EQU 0x02; slider switches when reading, LEDs when writing
0000 0000 s PORT_COL	EQU 0x07; hex key colums 3..0 when writing
0000 0000 s PORT_ROW	EQU 0x07; hex key rows 3..0 when reading
0000 0000 s MASK_VALID	EQU 0x01; fields in UART status register
0000 0000 s MASK_READY	EQU 0x02;
0000 0000 s MASK_ERROR	EQU 0x40;
0000 0000 s MASK_INTREQ	EQU 0x80;
0000 0000 s 
0000 0000 s MASK_BUTTON0	EQU 0x01;
0000 0000 s MASK_BUTTON1	EQU 0x02;
0000 0000 s MASK_BUTTON2	EQU 0x04;
0000 0000 s MASK_BUTTON3	EQU 0x08;
0000 0000 s MASK_SW0	EQU 0x01;
0000 0000 s MASK_SW1	EQU 0x02;
0000 0000 s MASK_SW2	EQU 0x04;
0000 0000 s MASK_SW3	EQU 0x08;
0000 0000 s MASK_SW4	EQU 0x10;
0000 0000 s MASK_SW5	EQU 0x20;
0000 0000 s MASK_SW6	EQU 0x40;
0000 0000 s MASK_SW7	EQU 0x80;
0000 0000 s 
0000 0000 s ;-------------------------------------------------------------
0000 0000 s AltMon		EQU 0x0400; Altmon is org'd to this location
0000 0000 s 
0000 0000 s ;-------------------------------------------------------------
0000 0000 s VdpRam		EQU 0x0C00; text video memory, 512b
0000 0000 s VdpFgColor	EQU VdpRam + 0x1FE	;write only, RRRGGGBB
0000 0000 s VdpBkColor	EQU VdpRam + 0x1FF	;write only, RRRGGGBB
0000 0000 s VdpCols		EQU VdpRam + 0x1FE	;read only, should be 30
0000 0000 s VdpRows		EQU VdpRam + 0x1FF	;read only, should be 17
0000 0000 s RamBottom	EQU 0xFE00
0000 0000 s Heap		EQU RamBottom + 0x0180
0000 0000 s Temp_PC		EQU Heap; can't use DW because the hex file maps to ROM only
0000 0000 s CursorCol	EQU Heap + 2
0000 0000 s CursorRow	EQU Heap + 3
0000 0000 s 
0000 0000 s ;Some ASCII codes with special handling during PrintCharText
0000 0000 s CS 	EQU 16  ;CS: Clear Screen      
0000 0000 s HM 	EQU 1   ;HM: HoMe cursor       
0000 0000 s NL 	EQU 13  ;NL: New Line
0000 0000 s CR 	EQU 13  ;CR: Carriage return == NL       
0000 0000 s LF 	EQU 10  ;LF: Line Feed       
0000 0000 s ML 	EQU  3  ;ML: Move cursor Left          
0000 0000 s MR 	EQU  4  ;MR: Move cursor Right         
0000 0000 s MU 	EQU  5  ;MU: Move cursor Up          
0000 0000 s MD 	EQU  6  ;MD: Move cursor Down
0000 0000 s TB 	EQU  9  ;TB: TaB        
0000 0000 s BS 	EQU  8  ;BS: BackSpace  
0000 0000 s 
0000 0000 s ;--------------------------------------
0000 0000 s ;fpuBase	EQU 0xF0	; I/O Mapped version
0000 0000 s fpuBase		EQU 0x0E00	; Mem Mapped version
0000 0000 s ;-- write access ----------------------
0000 0000 s fpuId		EQU fpuBase + 0
0000 0000 s fpuOperation	EQU fpuBase + 2
0000 0000 s fpuOperand1Lo	EQU fpuBase + 4
0000 0000 s fpuOperand1Hi	EQU fpuBase + 6
0000 0000 s fpuOperand2Lo	EQU fpuBase + 8
0000 0000 s fpuOperand2Hi	EQU fpuBase + 10
0000 0000 s ;-- read access -----------------------
0000 0000 s fpuDone		EQU fpuBase + 0
0000 0000 s fpuStatus	EQU fpuBase + 2
0000 0000 s fpuResultLo	EQU fpuBase + 4
0000 0000 s fpuResultHi	EQU fpuBase + 6
0000 0000 s fpuCycles	EQU fpuBase + 8
0000 0000 s 
0000 0000 f test_fpu_mem2.asm
0000 0000 s 
0000 0000 s 
0000 0000 s ; text video memory, 512b
8000 8000 s 		ORG 0x8000
8000 8000 s 
8000 8000 d ff
8000 8000 s TestFpu:	RST 7
8001 8001 s 
8001 8001 d 214880
8001 8001 s 		LXI H, test_div
8004 8004 d 11000e
8004 8004 s 		LXI D, fpuID
8007 8007 d 0e0c
8007 8007 s 		MVI C, 12
8009 8009 d cd3d80
8009 8009 s 		CALL CopyH2D
800c 800c s 		
800c 800c d cd3480
800c 800c s 		Call FpuWait
800f 800f s 
800f 800f d 21020e
800f 800f s 		LXI H, fpuStatus
8012 8012 d 115480
8012 8012 s 		LXI D, div_status
8015 8015 d 0e02
8015 8015 s 		MVI C, 2
8017 8017 d cd3d80
8017 8017 s 		CALL CopyH2D
801a 801a d 2a5480
801a 801a s 		LHLD div_status
801d 801d d e5
801d 801d s 		PUSH H
801e 801e d f1
801e 801e s 		POP PSW
801f 801f d da3080
801f 801f s 		JC Error
8022 8022 s 
8022 8022 d 21040e
8022 8022 s 		LXI H, fpuResultLo
8025 8025 d 115680
8025 8025 s 		LXI D, div_result
8028 8028 d 0e04
8028 8028 s 		MVI C, 4
802a 802a d cd3d80
802a 802a s 		CALL CopyH2D
802d 802d s 
802d 802d s ;		LXI D, test_sfsr
802d 802d s ;		CALL WriteId
802d 802d s ;		CALL WriteOperation
802d 802d s ;		CALL FpuWait
802d 802d s ;		CALL ReadStatus
802d 802d s ;		JC Error
802d 802d s ;		CALL ReadResult
802d 802d s ;		CALL ReadElapsed
802d 802d s 
802d 802d d c33180
802d 802d s 		JMP NoError
8030 8030 s 
8030 8030 d ff
8030 8030 s Error:		RST 7
8031 8031 d c30004
8031 8031 s NoError:	JMP AltMon
8034 8034 s 
8034 8034 d 2a000e
8034 8034 s FpuWait:	LHLD fpuDone
8037 8037 d 7d
8037 8037 s 		MOV A, L
8038 8038 d b4
8038 8038 s 		ORA H
8039 8039 d c0
8039 8039 s 		RNZ	
803a 803a d c33480
803a 803a s 		JMP FpuWait
803d 803d s 
803d 803d d 7e
803d 803d s CopyH2D		MOV A, M
803e 803e d 12
803e 803e s 		STAX D
803f 803f d 23
803f 803f s 		INX H
8040 8040 d 13
8040 8040 s 		INX D
8041 8041 d 0d
8041 8041 s 		DCR C
8042 8042 d 79
8042 8042 s 		MOV A, C
8043 8043 d b1
8043 8043 s 		ORA C
8044 8044 d c23d80
8044 8044 s 		JNZ CopyH2D
8047 8047 d c9
8047 8047 s 		RET
8048 8048 s 
8048 8048 d be00
8048 8048 s test_div:	DW format11
804a 804a d 8421
804a 804a s 		DW f11Single | f11Div | dm | sm
804c 804c d 0000
804c 804c s 		DW fTenLo
804e 804e d 2041
804e 804e s 		DW fTenHi
8050 8050 d 0000
8050 8050 s 		DW fMinusOneLo
8052 8052 d 80bf
8052 8052 s 		DW fMinusOneHi
8054 8054 d ffff
8054 8054 s div_status:	DW 0xFFFF	;-- filler
8056 8056 d dead
8056 8056 s div_result:	DW 0xADDE	;-- filler
8058 8058 d beef
8058 8058 s 		DW 0xEFBE	;-- filler
805a 805a d ffff
805a 805a s div_cycles	DW 0xFFFF	;-- filler
805c 805c s 
805c 805c d 3e00
805c 805c s test_sfsr:	DW format9
805e 805e d 0432
805e 805e s 		DW f9Sfsr | dm | f9DWord | f9Double
8060 8060 d ffff
8060 8060 s fpsr_status:	DW 0xFFFF	;-- filler
8062 8062 d dead
8062 8062 s fpsrLo:		DW 0xADDE	;-- filler
8064 8064 d beef
8064 8064 s fpsrHi:		DW 0xEFBE	;-- filler
8066 8066 d ffff
8066 8066 s fpsr_cycles:	DW 0xFFFF	;-- filler
8068 8068 s 		
8068 8068 s 
8068 8068 s fOneLo:		EQU 0x0000
8068 8068 s fOneHi:		EQU 0x3F80
8068 8068 s fMinusOneLo:	EQU 0x0000
8068 8068 s fMinusOneHi:	EQU 0xBF80
8068 8068 s fTenLo:		EQU 0x0000
8068 8068 s fTenHi:		EQU 0x4120
8068 8068 s 
8068 8068 s ; -- source operands (m = supplied from the bus (from memory), rx = internal from register x)
8068 8068 s sm		EQU 0x0080
8068 8068 s sr7		EQU 0x0038
8068 8068 s sr6		EQU 0x0030
8068 8068 s sr5		EQU 0x0028
8068 8068 s sr4		EQU 0x0020
8068 8068 s sr3		EQU 0x0018
8068 8068 s sr2		EQU 0x0010
8068 8068 s sr1		EQU 0x0008
8068 8068 s sr0		EQU 0x0000
8068 8068 s ; -- destination operands (m = supplied from/to the bus (from memory), rx = internal from register x)
8068 8068 s dm		EQU 0x0004
8068 8068 s dr7		EQU 0x8003
8068 8068 s dr6		EQU 0x0003
8068 8068 s dr5		EQU 0x8002
8068 8068 s dr4		EQU 0x0002
8068 8068 s dr3		EQU 0x8001
8068 8068 s dr2		EQU 0x0001
8068 8068 s dr1		EQU 0x8000
8068 8068 s dr0		EQU 0x0000
8068 8068 s 
8068 8068 s ;--- format 11 constants ---
8068 8068 s format11:	EQU 0x00BE	
8068 8068 s f11Single:	EQU 0x0100
8068 8068 s f11Double:	EQU 0x0000
8068 8068 s f11Add:		EQU 0x0000
8068 8068 s f11Sub:		EQU 0x1000
8068 8068 s f11Div:		EQU 0x2000
8068 8068 s f11Mul:		EQU 0x3000
8068 8068 s f11Cmp:		EQU 0x0800
8068 8068 s f11Neg:		EQU 0x2400
8068 8068 s f11Abs:		EQU 0x3400
8068 8068 s 
8068 8068 s ;--- format 19 constants ---
8068 8068 s format9:	EQU 0x003E	
8068 8068 s f9Single:	EQU 0x0400
8068 8068 s f9Double:	EQU 0x0000
8068 8068 s f9Byte:		EQU 0x0000
8068 8068 s f9Word:		EQU 0x0100
8068 8068 s f9DWord:	EQU 0x0200
8068 8068 s f9Mov:		EQU 0x0000
8068 8068 s f9Floor:	EQU 0x3800
8068 8068 s f9Trunc:	EQU 0x2800
8068 8068 s f9Round:	EQU 0x2000
8068 8068 s f9Movfl:	EQU 0x1800
8068 8068 s f9Movlf:	EQU 0x1000
8068 8068 s f9Movf:		EQU 0x4000
8068 8068 s f9Lfsr:		EQU 0x0800
8068 8068 s f9Sfsr:		EQU 0x3000
8068 8068 s 
0006 v md
000a v lf
0004 v dm
0001 v hm
0010 v cs
000d v cr
0009 v tb
0003 v ml
000d v nl
0008 v bs
0004 v mr
0080 v sm
0005 v mu
0000 v dr0
8000 v dr1
0001 v dr2
8001 v dr3
0002 v dr4
8002 v dr5
0003 v dr6
8003 v dr7
0000 v sr0
0008 v sr1
0010 v sr2
0018 v sr3
0020 v sr4
0028 v sr5
0030 v sr6
0038 v sr7
ff80 v heap
0000 v f11add
0000 v f9mov
0000 v port0
0001 v port1
0002 v port2
3400 v f11abs
2400 v f11neg
0800 v f11cmp
2000 v f11div
1000 v f11sub
3000 v f11mul
0e00 v fpuid
8030 a error
0000 v f9byte
0800 v f9lfsr
4000 v f9movf
0100 v f9word
3000 v f9sfsr
3f80 v fonehi
4120 v ftenhi
0000 v fonelo
0000 v ftenlo
0c00 v vdpram
0400 v altmon
8064 a fpsrhi
8062 a fpsrlo
803d a copyh2d
0200 v f9dword
3800 v f9floor
003e v format9
1800 v f9movfl
1000 v f9movlf
2000 v f9round
2800 v f9trunc
0e00 v fpubase
ff80 v temp_pc
00be v format11
0e00 v fpudone
0dfe v vdpcols
8034 a fpuwait
8031 a noerror
8000 a testfpu
0dff v vdprows
0000 v f9double
0400 v f9single
0001 v mask_sw0
0002 v mask_sw1
0004 v mask_sw2
0008 v mask_sw3
0010 v mask_sw4
0020 v mask_sw5
0040 v mask_sw6
0080 v mask_sw7
0000 v f11double
0100 v f11single
0007 v port_col
8048 a test_div
0007 v port_row
0011 v acia0_data
0013 v acia1_data
0e08 v fpucycles
fe00 v rambottom
ff82 v cursorcol
805c a test_sfsr
0e02 v fpustatus
ff83 v cursorrow
0001 v mask_valid
0002 v mask_ready
805a a div_cycles
0040 v mask_error
0dfe v vdpfgcolor
0dff v vdpbkcolor
8056 a div_result
8054 a div_status
8066 a fpsr_cycles
0080 v mask_intreq
bf80 v fminusonehi
0000 v fminusonelo
0e06 v fpuresulthi
8060 a fpsr_status
0010 v acia0_status
0012 v acia1_status
0e04 v fpuresultlo
0001 v mask_button0
0002 v mask_button1
0004 v mask_button2
0008 v mask_button3
0e02 v fpuoperation
0e06 v fpuoperand1hi
0e0a v fpuoperand2hi
0e04 v fpuoperand1lo
0e08 v fpuoperand2lo
